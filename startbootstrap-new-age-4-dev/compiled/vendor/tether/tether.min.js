"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (t, e) {
  "function" == typeof define && define.amd ? define(e) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? module.exports = e(require, exports, module) : t.Tether = e();
}(undefined, function (t, e, o) {
  "use strict";
  function i(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }function n(t) {
    var e = t.getBoundingClientRect(),
        o = {};for (var i in e) {
      o[i] = e[i];
    }if (t.ownerDocument !== document) {
      var r = t.ownerDocument.defaultView.frameElement;if (r) {
        var s = n(r);o.top += s.top, o.bottom += s.top, o.left += s.left, o.right += s.left;
      }
    }return o;
  }function r(t) {
    var e = getComputedStyle(t) || {},
        o = e.position,
        i = [];if ("fixed" === o) return [t];for (var n = t; (n = n.parentNode) && n && 1 === n.nodeType;) {
      var r = void 0;try {
        r = getComputedStyle(n);
      } catch (s) {}if ("undefined" == typeof r || null === r) return i.push(n), i;var a = r,
          f = a.overflow,
          l = a.overflowX,
          h = a.overflowY;/(auto|scroll)/.test(f + h + l) && ("absolute" !== o || ["relative", "absolute", "fixed"].indexOf(r.position) >= 0) && i.push(n);
    }return i.push(t.ownerDocument.body), t.ownerDocument !== document && i.push(t.ownerDocument.defaultView), i;
  }function s() {
    A && document.body.removeChild(A), A = null;
  }function a(t) {
    var e = void 0;t === document ? (e = document, t = document.documentElement) : e = t.ownerDocument;var o = e.documentElement,
        i = n(t),
        r = P();return i.top -= r.top, i.left -= r.left, "undefined" == typeof i.width && (i.width = document.body.scrollWidth - i.left - i.right), "undefined" == typeof i.height && (i.height = document.body.scrollHeight - i.top - i.bottom), i.top = i.top - o.clientTop, i.left = i.left - o.clientLeft, i.right = e.body.clientWidth - i.width - i.left, i.bottom = e.body.clientHeight - i.height - i.top, i;
  }function f(t) {
    return t.offsetParent || document.documentElement;
  }function l() {
    if (M) return M;var t = document.createElement("div");t.style.width = "100%", t.style.height = "200px";var e = document.createElement("div");h(e.style, { position: "absolute", top: 0, left: 0, pointerEvents: "none", visibility: "hidden", width: "200px", height: "150px", overflow: "hidden" }), e.appendChild(t), document.body.appendChild(e);var o = t.offsetWidth;e.style.overflow = "scroll";var i = t.offsetWidth;o === i && (i = e.clientWidth), document.body.removeChild(e);var n = o - i;return M = { width: n, height: n };
  }function h() {
    var t = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0],
        e = [];return Array.prototype.push.apply(e, arguments), e.slice(1).forEach(function (e) {
      if (e) for (var o in e) {
        ({}).hasOwnProperty.call(e, o) && (t[o] = e[o]);
      }
    }), t;
  }function d(t, e) {
    if ("undefined" != typeof t.classList) e.split(" ").forEach(function (e) {
      e.trim() && t.classList.remove(e);
    });else {
      var o = new RegExp("(^| )" + e.split(" ").join("|") + "( |$)", "gi"),
          i = c(t).replace(o, " ");g(t, i);
    }
  }function p(t, e) {
    if ("undefined" != typeof t.classList) e.split(" ").forEach(function (e) {
      e.trim() && t.classList.add(e);
    });else {
      d(t, e);var o = c(t) + (" " + e);g(t, o);
    }
  }function u(t, e) {
    if ("undefined" != typeof t.classList) return t.classList.contains(e);var o = c(t);return new RegExp("(^| )" + e + "( |$)", "gi").test(o);
  }function c(t) {
    return t.className instanceof t.ownerDocument.defaultView.SVGAnimatedString ? t.className.baseVal : t.className;
  }function g(t, e) {
    t.setAttribute("class", e);
  }function m(t, e, o) {
    o.forEach(function (o) {
      e.indexOf(o) === -1 && u(t, o) && d(t, o);
    }), e.forEach(function (e) {
      u(t, e) || p(t, e);
    });
  }function i(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }function v(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
  }function y(t, e) {
    var o = arguments.length <= 2 || void 0 === arguments[2] ? 1 : arguments[2];return t + o >= e && e >= t - o;
  }function b() {
    return "undefined" != typeof performance && "undefined" != typeof performance.now ? performance.now() : +new Date();
  }function w() {
    for (var t = { top: 0, left: 0 }, e = arguments.length, o = Array(e), i = 0; i < e; i++) {
      o[i] = arguments[i];
    }return o.forEach(function (e) {
      var o = e.top,
          i = e.left;"string" == typeof o && (o = parseFloat(o, 10)), "string" == typeof i && (i = parseFloat(i, 10)), t.top += o, t.left += i;
    }), t;
  }function C(t, e) {
    return "string" == typeof t.left && t.left.indexOf("%") !== -1 && (t.left = parseFloat(t.left, 10) / 100 * e.width), "string" == typeof t.top && t.top.indexOf("%") !== -1 && (t.top = parseFloat(t.top, 10) / 100 * e.height), t;
  }function O(t, e) {
    return "scrollParent" === e ? e = t.scrollParents[0] : "window" === e && (e = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset]), e === document && (e = e.documentElement), "undefined" != typeof e.nodeType && !function () {
      var t = e,
          o = a(e),
          i = o,
          n = getComputedStyle(e);if (e = [i.left, i.top, o.width + i.left, o.height + i.top], t.ownerDocument !== document) {
        var r = t.ownerDocument.defaultView;e[0] += r.pageXOffset, e[1] += r.pageYOffset, e[2] += r.pageXOffset, e[3] += r.pageYOffset;
      }G.forEach(function (t, o) {
        t = t[0].toUpperCase() + t.substr(1), "Top" === t || "Left" === t ? e[o] += parseFloat(n["border" + t + "Width"]) : e[o] -= parseFloat(n["border" + t + "Width"]);
      });
    }(), e;
  }var E = function () {
    function t(t, e) {
      for (var o = 0; o < e.length; o++) {
        var i = e[o];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
      }
    }return function (e, o, i) {
      return o && t(e.prototype, o), i && t(e, i), e;
    };
  }(),
      x = void 0;"undefined" == typeof x && (x = { modules: [] });var A = null,
      T = function () {
    var t = 0;return function () {
      return ++t;
    };
  }(),
      S = {},
      P = function P() {
    var t = A;t && document.body.contains(t) || (t = document.createElement("div"), t.setAttribute("data-tether-id", T()), h(t.style, { top: 0, left: 0, position: "absolute" }), document.body.appendChild(t), A = t);var e = t.getAttribute("data-tether-id");return "undefined" == typeof S[e] && (S[e] = n(t), k(function () {
      delete S[e];
    })), S[e];
  },
      M = null,
      W = [],
      k = function k(t) {
    W.push(t);
  },
      _ = function _() {
    for (var t = void 0; t = W.pop();) {
      t();
    }
  },
      B = function () {
    function t() {
      i(this, t);
    }return E(t, [{ key: "on", value: function value(t, e, o) {
        var i = !(arguments.length <= 3 || void 0 === arguments[3]) && arguments[3];"undefined" == typeof this.bindings && (this.bindings = {}), "undefined" == typeof this.bindings[t] && (this.bindings[t] = []), this.bindings[t].push({ handler: e, ctx: o, once: i });
      } }, { key: "once", value: function value(t, e, o) {
        this.on(t, e, o, !0);
      } }, { key: "off", value: function value(t, e) {
        if ("undefined" != typeof this.bindings && "undefined" != typeof this.bindings[t]) if ("undefined" == typeof e) delete this.bindings[t];else for (var o = 0; o < this.bindings[t].length;) {
          this.bindings[t][o].handler === e ? this.bindings[t].splice(o, 1) : ++o;
        }
      } }, { key: "trigger", value: function value(t) {
        if ("undefined" != typeof this.bindings && this.bindings[t]) {
          for (var e = 0, o = arguments.length, i = Array(o > 1 ? o - 1 : 0), n = 1; n < o; n++) {
            i[n - 1] = arguments[n];
          }for (; e < this.bindings[t].length;) {
            var r = this.bindings[t][e],
                s = r.handler,
                a = r.ctx,
                f = r.once,
                l = a;"undefined" == typeof l && (l = this), s.apply(l, i), f ? this.bindings[t].splice(e, 1) : ++e;
          }
        }
      } }]), t;
  }();x.Utils = { getActualBoundingClientRect: n, getScrollParents: r, getBounds: a, getOffsetParent: f, extend: h, addClass: p, removeClass: d, hasClass: u, updateClasses: m, defer: k, flush: _, uniqueId: T, Evented: B, getScrollBarSize: l, removeUtilElements: s };var z = function () {
    function t(t, e) {
      var o = [],
          i = !0,
          n = !1,
          r = void 0;try {
        for (var s, a = t[Symbol.iterator](); !(i = (s = a.next()).done) && (o.push(s.value), !e || o.length !== e); i = !0) {}
      } catch (f) {
        n = !0, r = f;
      } finally {
        try {
          !i && a["return"] && a["return"]();
        } finally {
          if (n) throw r;
        }
      }return o;
    }return function (e, o) {
      if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, o);throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
  }(),
      E = function () {
    function t(t, e) {
      for (var o = 0; o < e.length; o++) {
        var i = e[o];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
      }
    }return function (e, o, i) {
      return o && t(e.prototype, o), i && t(e, i), e;
    };
  }(),
      j = function j(t, e, o) {
    for (var i = !0; i;) {
      var n = t,
          r = e,
          s = o;i = !1, null === n && (n = Function.prototype);var a = Object.getOwnPropertyDescriptor(n, r);if (void 0 !== a) {
        if ("value" in a) return a.value;var f = a.get;if (void 0 === f) return;return f.call(s);
      }var l = Object.getPrototypeOf(n);if (null === l) return;t = l, e = r, o = s, i = !0, a = l = void 0;
    }
  };if ("undefined" == typeof x) throw new Error("You must include the utils.js file before tether.js");var Y = x.Utils,
      r = Y.getScrollParents,
      a = Y.getBounds,
      f = Y.getOffsetParent,
      h = Y.extend,
      p = Y.addClass,
      d = Y.removeClass,
      m = Y.updateClasses,
      k = Y.defer,
      _ = Y.flush,
      l = Y.getScrollBarSize,
      s = Y.removeUtilElements,
      L = function () {
    if ("undefined" == typeof document) return "";for (var t = document.createElement("div"), e = ["transform", "WebkitTransform", "OTransform", "MozTransform", "msTransform"], o = 0; o < e.length; ++o) {
      var i = e[o];if (void 0 !== t.style[i]) return i;
    }
  }(),
      D = [],
      X = function X() {
    D.forEach(function (t) {
      t.position(!1);
    }), _();
  };!function () {
    var t = null,
        e = null,
        o = null,
        i = function n() {
      return "undefined" != typeof e && e > 16 ? (e = Math.min(e - 16, 250), void (o = setTimeout(n, 250))) : void ("undefined" != typeof t && b() - t < 10 || (null != o && (clearTimeout(o), o = null), t = b(), X(), e = b() - t));
    };"undefined" != typeof window && "undefined" != typeof window.addEventListener && ["resize", "scroll", "touchmove"].forEach(function (t) {
      window.addEventListener(t, i);
    });
  }();var F = { center: "center", left: "right", right: "left" },
      H = { middle: "middle", top: "bottom", bottom: "top" },
      N = { top: 0, left: 0, middle: "50%", center: "50%", bottom: "100%", right: "100%" },
      U = function U(t, e) {
    var o = t.left,
        i = t.top;return "auto" === o && (o = F[e.left]), "auto" === i && (i = H[e.top]), { left: o, top: i };
  },
      V = function V(t) {
    var e = t.left,
        o = t.top;return "undefined" != typeof N[t.left] && (e = N[t.left]), "undefined" != typeof N[t.top] && (o = N[t.top]), { left: e, top: o };
  },
      R = function R(t) {
    var e = t.split(" "),
        o = z(e, 2),
        i = o[0],
        n = o[1];return { top: i, left: n };
  },
      q = R,
      I = function (t) {
    function e(t) {
      var o = this;i(this, e), j(Object.getPrototypeOf(e.prototype), "constructor", this).call(this), this.position = this.position.bind(this), D.push(this), this.history = [], this.setOptions(t, !1), x.modules.forEach(function (t) {
        "undefined" != typeof t.initialize && t.initialize.call(o);
      }), this.position();
    }return v(e, t), E(e, [{ key: "getClass", value: function value() {
        var t = arguments.length <= 0 || void 0 === arguments[0] ? "" : arguments[0],
            e = this.options.classes;return "undefined" != typeof e && e[t] ? this.options.classes[t] : this.options.classPrefix ? this.options.classPrefix + "-" + t : t;
      } }, { key: "setOptions", value: function value(t) {
        var e = this,
            o = arguments.length <= 1 || void 0 === arguments[1] || arguments[1],
            i = { offset: "0 0", targetOffset: "0 0", targetAttachment: "auto auto", classPrefix: "tether" };this.options = h(i, t);var n = this.options,
            s = n.element,
            a = n.target,
            f = n.targetModifier;if (this.element = s, this.target = a, this.targetModifier = f, "viewport" === this.target ? (this.target = document.body, this.targetModifier = "visible") : "scroll-handle" === this.target && (this.target = document.body, this.targetModifier = "scroll-handle"), ["element", "target"].forEach(function (t) {
          if ("undefined" == typeof e[t]) throw new Error("Tether Error: Both element and target must be defined");"undefined" != typeof e[t].jquery ? e[t] = e[t][0] : "string" == typeof e[t] && (e[t] = document.querySelector(e[t]));
        }), p(this.element, this.getClass("element")), this.options.addTargetClasses !== !1 && p(this.target, this.getClass("target")), !this.options.attachment) throw new Error("Tether Error: You must provide an attachment");this.targetAttachment = q(this.options.targetAttachment), this.attachment = q(this.options.attachment), this.offset = R(this.options.offset), this.targetOffset = R(this.options.targetOffset), "undefined" != typeof this.scrollParents && this.disable(), "scroll-handle" === this.targetModifier ? this.scrollParents = [this.target] : this.scrollParents = r(this.target), this.options.enabled !== !1 && this.enable(o);
      } }, { key: "getTargetBounds", value: function value() {
        if ("undefined" == typeof this.targetModifier) return a(this.target);if ("visible" === this.targetModifier) {
          if (this.target === document.body) return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };var t = a(this.target),
              e = { height: t.height, width: t.width, top: t.top, left: t.left };return e.height = Math.min(e.height, t.height - (pageYOffset - t.top)), e.height = Math.min(e.height, t.height - (t.top + t.height - (pageYOffset + innerHeight))), e.height = Math.min(innerHeight, e.height), e.height -= 2, e.width = Math.min(e.width, t.width - (pageXOffset - t.left)), e.width = Math.min(e.width, t.width - (t.left + t.width - (pageXOffset + innerWidth))), e.width = Math.min(innerWidth, e.width), e.width -= 2, e.top < pageYOffset && (e.top = pageYOffset), e.left < pageXOffset && (e.left = pageXOffset), e;
        }if ("scroll-handle" === this.targetModifier) {
          var t = void 0,
              o = this.target;o === document.body ? (o = document.documentElement, t = { left: pageXOffset, top: pageYOffset, height: innerHeight, width: innerWidth }) : t = a(o);var i = getComputedStyle(o),
              n = o.scrollWidth > o.clientWidth || [i.overflow, i.overflowX].indexOf("scroll") >= 0 || this.target !== document.body,
              r = 0;n && (r = 15);var s = t.height - parseFloat(i.borderTopWidth) - parseFloat(i.borderBottomWidth) - r,
              e = { width: 15, height: .975 * s * (s / o.scrollHeight), left: t.left + t.width - parseFloat(i.borderLeftWidth) - 15 },
              f = 0;s < 408 && this.target === document.body && (f = -11e-5 * Math.pow(s, 2) - .00727 * s + 22.58), this.target !== document.body && (e.height = Math.max(e.height, 24));var l = this.target.scrollTop / (o.scrollHeight - s);return e.top = l * (s - e.height - f) + t.top + parseFloat(i.borderTopWidth), this.target === document.body && (e.height = Math.max(e.height, 24)), e;
        }
      } }, { key: "clearCache", value: function value() {
        this._cache = {};
      } }, { key: "cache", value: function value(t, e) {
        return "undefined" == typeof this._cache && (this._cache = {}), "undefined" == typeof this._cache[t] && (this._cache[t] = e.call(this)), this._cache[t];
      } }, { key: "enable", value: function value() {
        var t = this,
            e = arguments.length <= 0 || void 0 === arguments[0] || arguments[0];this.options.addTargetClasses !== !1 && p(this.target, this.getClass("enabled")), p(this.element, this.getClass("enabled")), this.enabled = !0, this.scrollParents.forEach(function (e) {
          e !== t.target.ownerDocument && e.addEventListener("scroll", t.position);
        }), e && this.position();
      } }, { key: "disable", value: function value() {
        var t = this;d(this.target, this.getClass("enabled")), d(this.element, this.getClass("enabled")), this.enabled = !1, "undefined" != typeof this.scrollParents && this.scrollParents.forEach(function (e) {
          e.removeEventListener("scroll", t.position);
        });
      } }, { key: "destroy", value: function value() {
        var t = this;this.disable(), D.forEach(function (e, o) {
          e === t && D.splice(o, 1);
        }), 0 === D.length && s();
      } }, { key: "updateAttachClasses", value: function value(t, e) {
        var o = this;t = t || this.attachment, e = e || this.targetAttachment;var i = ["left", "top", "bottom", "right", "middle", "center"];"undefined" != typeof this._addAttachClasses && this._addAttachClasses.length && this._addAttachClasses.splice(0, this._addAttachClasses.length), "undefined" == typeof this._addAttachClasses && (this._addAttachClasses = []);var n = this._addAttachClasses;t.top && n.push(this.getClass("element-attached") + "-" + t.top), t.left && n.push(this.getClass("element-attached") + "-" + t.left), e.top && n.push(this.getClass("target-attached") + "-" + e.top), e.left && n.push(this.getClass("target-attached") + "-" + e.left);var r = [];i.forEach(function (t) {
          r.push(o.getClass("element-attached") + "-" + t), r.push(o.getClass("target-attached") + "-" + t);
        }), k(function () {
          "undefined" != typeof o._addAttachClasses && (m(o.element, o._addAttachClasses, r), o.options.addTargetClasses !== !1 && m(o.target, o._addAttachClasses, r), delete o._addAttachClasses);
        });
      } }, { key: "position", value: function value() {
        var t = this,
            e = arguments.length <= 0 || void 0 === arguments[0] || arguments[0];if (this.enabled) {
          this.clearCache();var o = U(this.targetAttachment, this.attachment);this.updateAttachClasses(this.attachment, o);var i = this.cache("element-bounds", function () {
            return a(t.element);
          }),
              n = i.width,
              r = i.height;if (0 === n && 0 === r && "undefined" != typeof this.lastSize) {
            var s = this.lastSize;n = s.width, r = s.height;
          } else this.lastSize = { width: n, height: r };var h = this.cache("target-bounds", function () {
            return t.getTargetBounds();
          }),
              d = h,
              p = C(V(this.attachment), { width: n, height: r }),
              u = C(V(o), d),
              c = C(this.offset, { width: n, height: r }),
              g = C(this.targetOffset, d);p = w(p, c), u = w(u, g);for (var m = h.left + u.left - p.left, v = h.top + u.top - p.top, y = 0; y < x.modules.length; ++y) {
            var b = x.modules[y],
                O = b.position.call(this, { left: m, top: v, targetAttachment: o, targetPos: h, elementPos: i, offset: p, targetOffset: u, manualOffset: c, manualTargetOffset: g, scrollbarSize: S, attachment: this.attachment });if (O === !1) return !1;"undefined" != typeof O && "object" == (typeof O === "undefined" ? "undefined" : _typeof(O)) && (v = O.top, m = O.left);
          }var E = { page: { top: v, left: m }, viewport: { top: v - pageYOffset, bottom: pageYOffset - v - r + innerHeight, left: m - pageXOffset, right: pageXOffset - m - n + innerWidth } },
              A = this.target.ownerDocument,
              T = A.defaultView,
              S = void 0;return T.innerHeight > A.documentElement.clientHeight && (S = this.cache("scrollbar-size", l), E.viewport.bottom -= S.height), T.innerWidth > A.documentElement.clientWidth && (S = this.cache("scrollbar-size", l), E.viewport.right -= S.width), ["", "static"].indexOf(A.body.style.position) !== -1 && ["", "static"].indexOf(A.body.parentElement.style.position) !== -1 || (E.page.bottom = A.body.scrollHeight - v - r, E.page.right = A.body.scrollWidth - m - n), "undefined" != typeof this.options.optimizations && this.options.optimizations.moveElement !== !1 && "undefined" == typeof this.targetModifier && !function () {
            var e = t.cache("target-offsetparent", function () {
              return f(t.target);
            }),
                o = t.cache("target-offsetparent-bounds", function () {
              return a(e);
            }),
                i = getComputedStyle(e),
                n = o,
                r = {};if (["Top", "Left", "Bottom", "Right"].forEach(function (t) {
              r[t.toLowerCase()] = parseFloat(i["border" + t + "Width"]);
            }), o.right = A.body.scrollWidth - o.left - n.width + r.right, o.bottom = A.body.scrollHeight - o.top - n.height + r.bottom, E.page.top >= o.top + r.top && E.page.bottom >= o.bottom && E.page.left >= o.left + r.left && E.page.right >= o.right) {
              var s = e.scrollTop,
                  l = e.scrollLeft;E.offset = { top: E.page.top - o.top + s - r.top, left: E.page.left - o.left + l - r.left };
            }
          }(), this.move(E), this.history.unshift(E), this.history.length > 3 && this.history.pop(), e && _(), !0;
        }
      } }, { key: "move", value: function value(t) {
        var e = this;if ("undefined" != typeof this.element.parentNode) {
          var o = {};for (var i in t) {
            o[i] = {};for (var n in t[i]) {
              for (var r = !1, s = 0; s < this.history.length; ++s) {
                var a = this.history[s];if ("undefined" != typeof a[i] && !y(a[i][n], t[i][n])) {
                  r = !0;break;
                }
              }r || (o[i][n] = !0);
            }
          }var l = { top: "", left: "", right: "", bottom: "" },
              d = function d(t, o) {
            var i = "undefined" != typeof e.options.optimizations,
                n = i ? e.options.optimizations.gpu : null;if (n !== !1) {
              var r = void 0,
                  s = void 0;if (t.top ? (l.top = 0, r = o.top) : (l.bottom = 0, r = -o.bottom), t.left ? (l.left = 0, s = o.left) : (l.right = 0, s = -o.right), window.matchMedia) {
                var a = window.matchMedia("only screen and (min-resolution: 1.3dppx)").matches || window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 1.3)").matches;a || (s = Math.round(s), r = Math.round(r));
              }l[L] = "translateX(" + s + "px) translateY(" + r + "px)", "msTransform" !== L && (l[L] += " translateZ(0)");
            } else t.top ? l.top = o.top + "px" : l.bottom = o.bottom + "px", t.left ? l.left = o.left + "px" : l.right = o.right + "px";
          },
              p = !1;if ((o.page.top || o.page.bottom) && (o.page.left || o.page.right) ? (l.position = "absolute", d(o.page, t.page)) : (o.viewport.top || o.viewport.bottom) && (o.viewport.left || o.viewport.right) ? (l.position = "fixed", d(o.viewport, t.viewport)) : "undefined" != typeof o.offset && o.offset.top && o.offset.left ? !function () {
            l.position = "absolute";var i = e.cache("target-offsetparent", function () {
              return f(e.target);
            });f(e.element) !== i && k(function () {
              e.element.parentNode.removeChild(e.element), i.appendChild(e.element);
            }), d(o.offset, t.offset), p = !0;
          }() : (l.position = "absolute", d({ top: !0, left: !0 }, t.page)), !p) if (this.options.bodyElement) this.options.bodyElement.appendChild(this.element);else {
            for (var u = !0, c = this.element.parentNode; c && 1 === c.nodeType && "BODY" !== c.tagName;) {
              if ("static" !== getComputedStyle(c).position) {
                u = !1;break;
              }c = c.parentNode;
            }u || (this.element.parentNode.removeChild(this.element), this.element.ownerDocument.body.appendChild(this.element));
          }var g = {},
              m = !1;for (var n in l) {
            var v = l[n],
                b = this.element.style[n];b !== v && (m = !0, g[n] = v);
          }m && k(function () {
            h(e.element.style, g), e.trigger("repositioned");
          });
        }
      } }]), e;
  }(B);I.modules = [], x.position = X;var $ = h(I, x),
      z = function () {
    function t(t, e) {
      var o = [],
          i = !0,
          n = !1,
          r = void 0;try {
        for (var s, a = t[Symbol.iterator](); !(i = (s = a.next()).done) && (o.push(s.value), !e || o.length !== e); i = !0) {}
      } catch (f) {
        n = !0, r = f;
      } finally {
        try {
          !i && a["return"] && a["return"]();
        } finally {
          if (n) throw r;
        }
      }return o;
    }return function (e, o) {
      if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, o);throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
  }(),
      Y = x.Utils,
      a = Y.getBounds,
      h = Y.extend,
      m = Y.updateClasses,
      k = Y.defer,
      G = ["left", "top", "right", "bottom"];x.modules.push({ position: function position(t) {
      var e = this,
          o = t.top,
          i = t.left,
          n = t.targetAttachment;if (!this.options.constraints) return !0;var r = this.cache("element-bounds", function () {
        return a(e.element);
      }),
          s = r.height,
          f = r.width;if (0 === f && 0 === s && "undefined" != typeof this.lastSize) {
        var l = this.lastSize;f = l.width, s = l.height;
      }var d = this.cache("target-bounds", function () {
        return e.getTargetBounds();
      }),
          p = d.height,
          u = d.width,
          c = [this.getClass("pinned"), this.getClass("out-of-bounds")];this.options.constraints.forEach(function (t) {
        var e = t.outOfBoundsClass,
            o = t.pinnedClass;e && c.push(e), o && c.push(o);
      }), c.forEach(function (t) {
        ["left", "top", "right", "bottom"].forEach(function (e) {
          c.push(t + "-" + e);
        });
      });var g = [],
          v = h({}, n),
          y = h({}, this.attachment);return this.options.constraints.forEach(function (t) {
        var r = t.to,
            a = t.attachment,
            l = t.pin;"undefined" == typeof a && (a = "");var h = void 0,
            d = void 0;if (a.indexOf(" ") >= 0) {
          var c = a.split(" "),
              m = z(c, 2);d = m[0], h = m[1];
        } else h = d = a;var b = O(e, r);"target" !== d && "both" !== d || (o < b[1] && "top" === v.top && (o += p, v.top = "bottom"), o + s > b[3] && "bottom" === v.top && (o -= p, v.top = "top")), "together" === d && ("top" === v.top && ("bottom" === y.top && o < b[1] ? (o += p, v.top = "bottom", o += s, y.top = "top") : "top" === y.top && o + s > b[3] && o - (s - p) >= b[1] && (o -= s - p, v.top = "bottom", y.top = "bottom")), "bottom" === v.top && ("top" === y.top && o + s > b[3] ? (o -= p, v.top = "top", o -= s, y.top = "bottom") : "bottom" === y.top && o < b[1] && o + (2 * s - p) <= b[3] && (o += s - p, v.top = "top", y.top = "top")), "middle" === v.top && (o + s > b[3] && "top" === y.top ? (o -= s, y.top = "bottom") : o < b[1] && "bottom" === y.top && (o += s, y.top = "top"))), "target" !== h && "both" !== h || (i < b[0] && "left" === v.left && (i += u, v.left = "right"), i + f > b[2] && "right" === v.left && (i -= u, v.left = "left")), "together" === h && (i < b[0] && "left" === v.left ? "right" === y.left ? (i += u, v.left = "right", i += f, y.left = "left") : "left" === y.left && (i += u, v.left = "right", i -= f, y.left = "right") : i + f > b[2] && "right" === v.left ? "left" === y.left ? (i -= u, v.left = "left", i -= f, y.left = "right") : "right" === y.left && (i -= u, v.left = "left", i += f, y.left = "left") : "center" === v.left && (i + f > b[2] && "left" === y.left ? (i -= f, y.left = "right") : i < b[0] && "right" === y.left && (i += f, y.left = "left"))), "element" !== d && "both" !== d || (o < b[1] && "bottom" === y.top && (o += s, y.top = "top"), o + s > b[3] && "top" === y.top && (o -= s, y.top = "bottom")), "element" !== h && "both" !== h || (i < b[0] && ("right" === y.left ? (i += f, y.left = "left") : "center" === y.left && (i += f / 2, y.left = "left")), i + f > b[2] && ("left" === y.left ? (i -= f, y.left = "right") : "center" === y.left && (i -= f / 2, y.left = "right"))), "string" == typeof l ? l = l.split(",").map(function (t) {
          return t.trim();
        }) : l === !0 && (l = ["top", "left", "right", "bottom"]), l = l || [];var w = [],
            C = [];o < b[1] && (l.indexOf("top") >= 0 ? (o = b[1], w.push("top")) : C.push("top")), o + s > b[3] && (l.indexOf("bottom") >= 0 ? (o = b[3] - s, w.push("bottom")) : C.push("bottom")), i < b[0] && (l.indexOf("left") >= 0 ? (i = b[0], w.push("left")) : C.push("left")), i + f > b[2] && (l.indexOf("right") >= 0 ? (i = b[2] - f, w.push("right")) : C.push("right")), w.length && !function () {
          var t = void 0;t = "undefined" != typeof e.options.pinnedClass ? e.options.pinnedClass : e.getClass("pinned"), g.push(t), w.forEach(function (e) {
            g.push(t + "-" + e);
          });
        }(), C.length && !function () {
          var t = void 0;t = "undefined" != typeof e.options.outOfBoundsClass ? e.options.outOfBoundsClass : e.getClass("out-of-bounds"), g.push(t), C.forEach(function (e) {
            g.push(t + "-" + e);
          });
        }(), (w.indexOf("left") >= 0 || w.indexOf("right") >= 0) && (y.left = v.left = !1), (w.indexOf("top") >= 0 || w.indexOf("bottom") >= 0) && (y.top = v.top = !1), v.top === n.top && v.left === n.left && y.top === e.attachment.top && y.left === e.attachment.left || (e.updateAttachClasses(y, v), e.trigger("update", { attachment: y, targetAttachment: v }));
      }), k(function () {
        e.options.addTargetClasses !== !1 && m(e.target, g, c), m(e.element, g, c);
      }), { top: o, left: i };
    } });var Y = x.Utils,
      a = Y.getBounds,
      m = Y.updateClasses,
      k = Y.defer;x.modules.push({ position: function position(t) {
      var e = this,
          o = t.top,
          i = t.left,
          n = this.cache("element-bounds", function () {
        return a(e.element);
      }),
          r = n.height,
          s = n.width,
          f = this.getTargetBounds(),
          l = o + r,
          h = i + s,
          d = [];o <= f.bottom && l >= f.top && ["left", "right"].forEach(function (t) {
        var e = f[t];e !== i && e !== h || d.push(t);
      }), i <= f.right && h >= f.left && ["top", "bottom"].forEach(function (t) {
        var e = f[t];e !== o && e !== l || d.push(t);
      });var p = [],
          u = [],
          c = ["left", "top", "right", "bottom"];return p.push(this.getClass("abutted")), c.forEach(function (t) {
        p.push(e.getClass("abutted") + "-" + t);
      }), d.length && u.push(this.getClass("abutted")), d.forEach(function (t) {
        u.push(e.getClass("abutted") + "-" + t);
      }), k(function () {
        e.options.addTargetClasses !== !1 && m(e.target, u, p), m(e.element, u, p);
      }), !0;
    } });var z = function () {
    function t(t, e) {
      var o = [],
          i = !0,
          n = !1,
          r = void 0;try {
        for (var s, a = t[Symbol.iterator](); !(i = (s = a.next()).done) && (o.push(s.value), !e || o.length !== e); i = !0) {}
      } catch (f) {
        n = !0, r = f;
      } finally {
        try {
          !i && a["return"] && a["return"]();
        } finally {
          if (n) throw r;
        }
      }return o;
    }return function (e, o) {
      if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, o);throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
  }();return x.modules.push({ position: function position(t) {
      var e = t.top,
          o = t.left;if (this.options.shift) {
        var i = this.options.shift;"function" == typeof this.options.shift && (i = this.options.shift.call(this, { top: e, left: o }));var n = void 0,
            r = void 0;if ("string" == typeof i) {
          i = i.split(" "), i[1] = i[1] || i[0];var s = i,
              a = z(s, 2);n = a[0], r = a[1], n = parseFloat(n, 10), r = parseFloat(r, 10);
        } else n = i.top, r = i.left;return e += n, o += r, { top: e, left: o };
      }
    } }), $;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3ZlbmRvci90ZXRoZXIvdGV0aGVyLm1pbi5qcyJdLCJuYW1lcyI6WyJ0IiwiZSIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiVGV0aGVyIiwibyIsImkiLCJUeXBlRXJyb3IiLCJuIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwib3duZXJEb2N1bWVudCIsImRvY3VtZW50IiwiciIsImRlZmF1bHRWaWV3IiwiZnJhbWVFbGVtZW50IiwicyIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsImdldENvbXB1dGVkU3R5bGUiLCJwb3NpdGlvbiIsInBhcmVudE5vZGUiLCJub2RlVHlwZSIsInB1c2giLCJhIiwiZiIsIm92ZXJmbG93IiwibCIsIm92ZXJmbG93WCIsImgiLCJvdmVyZmxvd1kiLCJ0ZXN0IiwiaW5kZXhPZiIsImJvZHkiLCJBIiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudEVsZW1lbnQiLCJQIiwid2lkdGgiLCJzY3JvbGxXaWR0aCIsImhlaWdodCIsInNjcm9sbEhlaWdodCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIm9mZnNldFBhcmVudCIsIk0iLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJwb2ludGVyRXZlbnRzIiwidmlzaWJpbGl0eSIsImFwcGVuZENoaWxkIiwib2Zmc2V0V2lkdGgiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJBcnJheSIsInByb3RvdHlwZSIsImFwcGx5Iiwic2xpY2UiLCJmb3JFYWNoIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZCIsImNsYXNzTGlzdCIsInNwbGl0IiwidHJpbSIsInJlbW92ZSIsIlJlZ0V4cCIsImpvaW4iLCJjIiwicmVwbGFjZSIsImciLCJwIiwiYWRkIiwidSIsImNvbnRhaW5zIiwiY2xhc3NOYW1lIiwiU1ZHQW5pbWF0ZWRTdHJpbmciLCJiYXNlVmFsIiwic2V0QXR0cmlidXRlIiwibSIsInYiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJ5IiwiYiIsInBlcmZvcm1hbmNlIiwibm93IiwiRGF0ZSIsInciLCJwYXJzZUZsb2F0IiwiQyIsIk8iLCJzY3JvbGxQYXJlbnRzIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwiRSIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwieCIsIm1vZHVsZXMiLCJUIiwiUyIsImdldEF0dHJpYnV0ZSIsImsiLCJXIiwiXyIsInBvcCIsIkIiLCJiaW5kaW5ncyIsImhhbmRsZXIiLCJjdHgiLCJvbmNlIiwib24iLCJzcGxpY2UiLCJVdGlscyIsImdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdCIsImdldFNjcm9sbFBhcmVudHMiLCJnZXRCb3VuZHMiLCJnZXRPZmZzZXRQYXJlbnQiLCJleHRlbmQiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJ1cGRhdGVDbGFzc2VzIiwiZGVmZXIiLCJmbHVzaCIsInVuaXF1ZUlkIiwiRXZlbnRlZCIsImdldFNjcm9sbEJhclNpemUiLCJyZW1vdmVVdGlsRWxlbWVudHMiLCJ6IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsImlzQXJyYXkiLCJqIiwiRnVuY3Rpb24iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJnZXRQcm90b3R5cGVPZiIsIkVycm9yIiwiWSIsIkwiLCJEIiwiWCIsIk1hdGgiLCJtaW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsIkYiLCJjZW50ZXIiLCJIIiwibWlkZGxlIiwiTiIsIlUiLCJWIiwiUiIsInEiLCJJIiwiYmluZCIsImhpc3RvcnkiLCJzZXRPcHRpb25zIiwiaW5pdGlhbGl6ZSIsIm9wdGlvbnMiLCJjbGFzc2VzIiwiY2xhc3NQcmVmaXgiLCJvZmZzZXQiLCJ0YXJnZXRPZmZzZXQiLCJ0YXJnZXRBdHRhY2htZW50IiwiZWxlbWVudCIsInRhcmdldCIsInRhcmdldE1vZGlmaWVyIiwianF1ZXJ5IiwicXVlcnlTZWxlY3RvciIsImdldENsYXNzIiwiYWRkVGFyZ2V0Q2xhc3NlcyIsImF0dGFjaG1lbnQiLCJkaXNhYmxlIiwiZW5hYmxlZCIsImVuYWJsZSIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJwb3ciLCJtYXgiLCJzY3JvbGxUb3AiLCJfY2FjaGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX2FkZEF0dGFjaENsYXNzZXMiLCJjbGVhckNhY2hlIiwidXBkYXRlQXR0YWNoQ2xhc3NlcyIsImNhY2hlIiwibGFzdFNpemUiLCJnZXRUYXJnZXRCb3VuZHMiLCJ0YXJnZXRQb3MiLCJlbGVtZW50UG9zIiwibWFudWFsT2Zmc2V0IiwibWFudWFsVGFyZ2V0T2Zmc2V0Iiwic2Nyb2xsYmFyU2l6ZSIsInBhZ2UiLCJ2aWV3cG9ydCIsInBhcmVudEVsZW1lbnQiLCJvcHRpbWl6YXRpb25zIiwibW92ZUVsZW1lbnQiLCJ0b0xvd2VyQ2FzZSIsInNjcm9sbExlZnQiLCJtb3ZlIiwidW5zaGlmdCIsImdwdSIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwicm91bmQiLCJib2R5RWxlbWVudCIsInRhZ05hbWUiLCJ0cmlnZ2VyIiwiJCIsIkciLCJjb25zdHJhaW50cyIsIm91dE9mQm91bmRzQ2xhc3MiLCJwaW5uZWRDbGFzcyIsInRvIiwicGluIiwibWFwIiwic2hpZnQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxDQUFDLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsZ0JBQVksT0FBT0MsTUFBbkIsSUFBMkJBLE9BQU9DLEdBQWxDLEdBQXNDRCxPQUFPRCxDQUFQLENBQXRDLEdBQWdE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RUFBYSxFQUFiLENBQWhCLEVBQWlDSSxJQUFFdUYsV0FBV3ZGLENBQVgsRUFBYSxFQUFiLENBQW5DO0FBQW9ELFNBQTNILE1BQWdJSixJQUFFRixFQUFFVSxHQUFKLEVBQVFKLElBQUVOLEVBQUVZLElBQVosQ0FBaUIsT0FBT3BCLEtBQUdVLENBQUgsRUFBS0gsS0FBR08sQ0FBUixFQUFVLEVBQUNJLEtBQUlsQixDQUFMLEVBQU9vQixNQUFLYixDQUFaLEVBQWpCO0FBQWdDO0FBQUMsS0FBM1gsRUFBZixHQUE2WW1PLENBQXBaO0FBQXNaLENBQTE1d0IsQ0FBRCIsImZpbGUiOiJ0ZXRoZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKHQsZSl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKHJlcXVpcmUsZXhwb3J0cyxtb2R1bGUpOnQuVGV0aGVyPWUoKX0odGhpcyxmdW5jdGlvbih0LGUsbyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gbih0KXt2YXIgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89e307Zm9yKHZhciBpIGluIGUpb1tpXT1lW2ldO2lmKHQub3duZXJEb2N1bWVudCE9PWRvY3VtZW50KXt2YXIgcj10Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZnJhbWVFbGVtZW50O2lmKHIpe3ZhciBzPW4ocik7by50b3ArPXMudG9wLG8uYm90dG9tKz1zLnRvcCxvLmxlZnQrPXMubGVmdCxvLnJpZ2h0Kz1zLmxlZnR9fXJldHVybiBvfWZ1bmN0aW9uIHIodCl7dmFyIGU9Z2V0Q29tcHV0ZWRTdHlsZSh0KXx8e30sbz1lLnBvc2l0aW9uLGk9W107aWYoXCJmaXhlZFwiPT09bylyZXR1cm5bdF07Zm9yKHZhciBuPXQ7KG49bi5wYXJlbnROb2RlKSYmbiYmMT09PW4ubm9kZVR5cGU7KXt2YXIgcj12b2lkIDA7dHJ5e3I9Z2V0Q29tcHV0ZWRTdHlsZShuKX1jYXRjaChzKXt9aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHJ8fG51bGw9PT1yKXJldHVybiBpLnB1c2gobiksaTt2YXIgYT1yLGY9YS5vdmVyZmxvdyxsPWEub3ZlcmZsb3dYLGg9YS5vdmVyZmxvd1k7LyhhdXRvfHNjcm9sbCkvLnRlc3QoZitoK2wpJiYoXCJhYnNvbHV0ZVwiIT09b3x8W1wicmVsYXRpdmVcIixcImFic29sdXRlXCIsXCJmaXhlZFwiXS5pbmRleE9mKHIucG9zaXRpb24pPj0wKSYmaS5wdXNoKG4pfXJldHVybiBpLnB1c2godC5vd25lckRvY3VtZW50LmJvZHkpLHQub3duZXJEb2N1bWVudCE9PWRvY3VtZW50JiZpLnB1c2godC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSxpfWZ1bmN0aW9uIHMoKXtBJiZkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKEEpLEE9bnVsbH1mdW5jdGlvbiBhKHQpe3ZhciBlPXZvaWQgMDt0PT09ZG9jdW1lbnQ/KGU9ZG9jdW1lbnQsdD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpOmU9dC5vd25lckRvY3VtZW50O3ZhciBvPWUuZG9jdW1lbnRFbGVtZW50LGk9bih0KSxyPVAoKTtyZXR1cm4gaS50b3AtPXIudG9wLGkubGVmdC09ci5sZWZ0LFwidW5kZWZpbmVkXCI9PXR5cGVvZiBpLndpZHRoJiYoaS53aWR0aD1kb2N1bWVudC5ib2R5LnNjcm9sbFdpZHRoLWkubGVmdC1pLnJpZ2h0KSxcInVuZGVmaW5lZFwiPT10eXBlb2YgaS5oZWlnaHQmJihpLmhlaWdodD1kb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodC1pLnRvcC1pLmJvdHRvbSksaS50b3A9aS50b3Atby5jbGllbnRUb3AsaS5sZWZ0PWkubGVmdC1vLmNsaWVudExlZnQsaS5yaWdodD1lLmJvZHkuY2xpZW50V2lkdGgtaS53aWR0aC1pLmxlZnQsaS5ib3R0b209ZS5ib2R5LmNsaWVudEhlaWdodC1pLmhlaWdodC1pLnRvcCxpfWZ1bmN0aW9uIGYodCl7cmV0dXJuIHQub2Zmc2V0UGFyZW50fHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnR9ZnVuY3Rpb24gbCgpe2lmKE0pcmV0dXJuIE07dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0LnN0eWxlLndpZHRoPVwiMTAwJVwiLHQuc3R5bGUuaGVpZ2h0PVwiMjAwcHhcIjt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2goZS5zdHlsZSx7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDowLGxlZnQ6MCxwb2ludGVyRXZlbnRzOlwibm9uZVwiLHZpc2liaWxpdHk6XCJoaWRkZW5cIix3aWR0aDpcIjIwMHB4XCIsaGVpZ2h0OlwiMTUwcHhcIixvdmVyZmxvdzpcImhpZGRlblwifSksZS5hcHBlbmRDaGlsZCh0KSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpO3ZhciBvPXQub2Zmc2V0V2lkdGg7ZS5zdHlsZS5vdmVyZmxvdz1cInNjcm9sbFwiO3ZhciBpPXQub2Zmc2V0V2lkdGg7bz09PWkmJihpPWUuY2xpZW50V2lkdGgpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZSk7dmFyIG49by1pO3JldHVybiBNPXt3aWR0aDpuLGhlaWdodDpufX1mdW5jdGlvbiBoKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aDw9MHx8dm9pZCAwPT09YXJndW1lbnRzWzBdP3t9OmFyZ3VtZW50c1swXSxlPVtdO3JldHVybiBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlLGFyZ3VtZW50cyksZS5zbGljZSgxKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGUpZm9yKHZhciBvIGluIGUpKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbykmJih0W29dPWVbb10pfSksdH1mdW5jdGlvbiBkKHQsZSl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuY2xhc3NMaXN0KWUuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS50cmltKCkmJnQuY2xhc3NMaXN0LnJlbW92ZShlKX0pO2Vsc2V7dmFyIG89bmV3IFJlZ0V4cChcIihefCApXCIrZS5zcGxpdChcIiBcIikuam9pbihcInxcIikrXCIoIHwkKVwiLFwiZ2lcIiksaT1jKHQpLnJlcGxhY2UobyxcIiBcIik7Zyh0LGkpfX1mdW5jdGlvbiBwKHQsZSl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuY2xhc3NMaXN0KWUuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS50cmltKCkmJnQuY2xhc3NMaXN0LmFkZChlKX0pO2Vsc2V7ZCh0LGUpO3ZhciBvPWModCkrKFwiIFwiK2UpO2codCxvKX19ZnVuY3Rpb24gdSh0LGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0LmNsYXNzTGlzdClyZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoZSk7dmFyIG89Yyh0KTtyZXR1cm4gbmV3IFJlZ0V4cChcIihefCApXCIrZStcIiggfCQpXCIsXCJnaVwiKS50ZXN0KG8pfWZ1bmN0aW9uIGModCl7cmV0dXJuIHQuY2xhc3NOYW1lIGluc3RhbmNlb2YgdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LlNWR0FuaW1hdGVkU3RyaW5nP3QuY2xhc3NOYW1lLmJhc2VWYWw6dC5jbGFzc05hbWV9ZnVuY3Rpb24gZyh0LGUpe3Quc2V0QXR0cmlidXRlKFwiY2xhc3NcIixlKX1mdW5jdGlvbiBtKHQsZSxvKXtvLmZvckVhY2goZnVuY3Rpb24obyl7ZS5pbmRleE9mKG8pPT09LTEmJnUodCxvKSYmZCh0LG8pfSksZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3UodCxlKXx8cCh0LGUpfSl9ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gdih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfWZ1bmN0aW9uIHkodCxlKXt2YXIgbz1hcmd1bWVudHMubGVuZ3RoPD0yfHx2b2lkIDA9PT1hcmd1bWVudHNbMl0/MTphcmd1bWVudHNbMl07cmV0dXJuIHQrbz49ZSYmZT49dC1vfWZ1bmN0aW9uIGIoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgcGVyZm9ybWFuY2UmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBwZXJmb3JtYW5jZS5ub3c/cGVyZm9ybWFuY2Uubm93KCk6K25ldyBEYXRlfWZ1bmN0aW9uIHcoKXtmb3IodmFyIHQ9e3RvcDowLGxlZnQ6MH0sZT1hcmd1bWVudHMubGVuZ3RoLG89QXJyYXkoZSksaT0wO2k8ZTtpKyspb1tpXT1hcmd1bWVudHNbaV07cmV0dXJuIG8uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbz1lLnRvcCxpPWUubGVmdDtcInN0cmluZ1wiPT10eXBlb2YgbyYmKG89cGFyc2VGbG9hdChvLDEwKSksXCJzdHJpbmdcIj09dHlwZW9mIGkmJihpPXBhcnNlRmxvYXQoaSwxMCkpLHQudG9wKz1vLHQubGVmdCs9aX0pLHR9ZnVuY3Rpb24gQyh0LGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0LmxlZnQmJnQubGVmdC5pbmRleE9mKFwiJVwiKSE9PS0xJiYodC5sZWZ0PXBhcnNlRmxvYXQodC5sZWZ0LDEwKS8xMDAqZS53aWR0aCksXCJzdHJpbmdcIj09dHlwZW9mIHQudG9wJiZ0LnRvcC5pbmRleE9mKFwiJVwiKSE9PS0xJiYodC50b3A9cGFyc2VGbG9hdCh0LnRvcCwxMCkvMTAwKmUuaGVpZ2h0KSx0fWZ1bmN0aW9uIE8odCxlKXtyZXR1cm5cInNjcm9sbFBhcmVudFwiPT09ZT9lPXQuc2Nyb2xsUGFyZW50c1swXTpcIndpbmRvd1wiPT09ZSYmKGU9W3BhZ2VYT2Zmc2V0LHBhZ2VZT2Zmc2V0LGlubmVyV2lkdGgrcGFnZVhPZmZzZXQsaW5uZXJIZWlnaHQrcGFnZVlPZmZzZXRdKSxlPT09ZG9jdW1lbnQmJihlPWUuZG9jdW1lbnRFbGVtZW50KSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZS5ub2RlVHlwZSYmIWZ1bmN0aW9uKCl7dmFyIHQ9ZSxvPWEoZSksaT1vLG49Z2V0Q29tcHV0ZWRTdHlsZShlKTtpZihlPVtpLmxlZnQsaS50b3Asby53aWR0aCtpLmxlZnQsby5oZWlnaHQraS50b3BdLHQub3duZXJEb2N1bWVudCE9PWRvY3VtZW50KXt2YXIgcj10Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7ZVswXSs9ci5wYWdlWE9mZnNldCxlWzFdKz1yLnBhZ2VZT2Zmc2V0LGVbMl0rPXIucGFnZVhPZmZzZXQsZVszXSs9ci5wYWdlWU9mZnNldH1HLmZvckVhY2goZnVuY3Rpb24odCxvKXt0PXRbMF0udG9VcHBlckNhc2UoKSt0LnN1YnN0cigxKSxcIlRvcFwiPT09dHx8XCJMZWZ0XCI9PT10P2Vbb10rPXBhcnNlRmxvYXQobltcImJvcmRlclwiK3QrXCJXaWR0aFwiXSk6ZVtvXS09cGFyc2VGbG9hdChuW1wiYm9yZGVyXCIrdCtcIldpZHRoXCJdKX0pfSgpLGV9dmFyIEU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciBpPWVbb107aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkua2V5LGkpfX1yZXR1cm4gZnVuY3Rpb24oZSxvLGkpe3JldHVybiBvJiZ0KGUucHJvdG90eXBlLG8pLGkmJnQoZSxpKSxlfX0oKSx4PXZvaWQgMDtcInVuZGVmaW5lZFwiPT10eXBlb2YgeCYmKHg9e21vZHVsZXM6W119KTt2YXIgQT1udWxsLFQ9ZnVuY3Rpb24oKXt2YXIgdD0wO3JldHVybiBmdW5jdGlvbigpe3JldHVybisrdH19KCksUz17fSxQPWZ1bmN0aW9uKCl7dmFyIHQ9QTt0JiZkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHQpfHwodD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHQuc2V0QXR0cmlidXRlKFwiZGF0YS10ZXRoZXItaWRcIixUKCkpLGgodC5zdHlsZSx7dG9wOjAsbGVmdDowLHBvc2l0aW9uOlwiYWJzb2x1dGVcIn0pLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodCksQT10KTt2YXIgZT10LmdldEF0dHJpYnV0ZShcImRhdGEtdGV0aGVyLWlkXCIpO3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBTW2VdJiYoU1tlXT1uKHQpLGsoZnVuY3Rpb24oKXtkZWxldGUgU1tlXX0pKSxTW2VdfSxNPW51bGwsVz1bXSxrPWZ1bmN0aW9uKHQpe1cucHVzaCh0KX0sXz1mdW5jdGlvbigpe2Zvcih2YXIgdD12b2lkIDA7dD1XLnBvcCgpOyl0KCl9LEI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7aSh0aGlzLHQpfXJldHVybiBFKHQsW3trZXk6XCJvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxvKXt2YXIgaT0hKGFyZ3VtZW50cy5sZW5ndGg8PTN8fHZvaWQgMD09PWFyZ3VtZW50c1szXSkmJmFyZ3VtZW50c1szXTtcInVuZGVmaW5lZFwiPT10eXBlb2YgdGhpcy5iaW5kaW5ncyYmKHRoaXMuYmluZGluZ3M9e30pLFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0aGlzLmJpbmRpbmdzW3RdJiYodGhpcy5iaW5kaW5nc1t0XT1bXSksdGhpcy5iaW5kaW5nc1t0XS5wdXNoKHtoYW5kbGVyOmUsY3R4Om8sb25jZTppfSl9fSx7a2V5Olwib25jZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxvKXt0aGlzLm9uKHQsZSxvLCEwKX19LHtrZXk6XCJvZmZcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLmJpbmRpbmdzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy5iaW5kaW5nc1t0XSlpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZSlkZWxldGUgdGhpcy5iaW5kaW5nc1t0XTtlbHNlIGZvcih2YXIgbz0wO288dGhpcy5iaW5kaW5nc1t0XS5sZW5ndGg7KXRoaXMuYmluZGluZ3NbdF1bb10uaGFuZGxlcj09PWU/dGhpcy5iaW5kaW5nc1t0XS5zcGxpY2UobywxKTorK299fSx7a2V5OlwidHJpZ2dlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLmJpbmRpbmdzJiZ0aGlzLmJpbmRpbmdzW3RdKXtmb3IodmFyIGU9MCxvPWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheShvPjE/by0xOjApLG49MTtuPG87bisrKWlbbi0xXT1hcmd1bWVudHNbbl07Zm9yKDtlPHRoaXMuYmluZGluZ3NbdF0ubGVuZ3RoOyl7dmFyIHI9dGhpcy5iaW5kaW5nc1t0XVtlXSxzPXIuaGFuZGxlcixhPXIuY3R4LGY9ci5vbmNlLGw9YTtcInVuZGVmaW5lZFwiPT10eXBlb2YgbCYmKGw9dGhpcykscy5hcHBseShsLGkpLGY/dGhpcy5iaW5kaW5nc1t0XS5zcGxpY2UoZSwxKTorK2V9fX19XSksdH0oKTt4LlV0aWxzPXtnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3Q6bixnZXRTY3JvbGxQYXJlbnRzOnIsZ2V0Qm91bmRzOmEsZ2V0T2Zmc2V0UGFyZW50OmYsZXh0ZW5kOmgsYWRkQ2xhc3M6cCxyZW1vdmVDbGFzczpkLGhhc0NsYXNzOnUsdXBkYXRlQ2xhc3NlczptLGRlZmVyOmssZmx1c2g6Xyx1bmlxdWVJZDpULEV2ZW50ZWQ6QixnZXRTY3JvbGxCYXJTaXplOmwscmVtb3ZlVXRpbEVsZW1lbnRzOnN9O3ZhciB6PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3ZhciBvPVtdLGk9ITAsbj0hMSxyPXZvaWQgMDt0cnl7Zm9yKHZhciBzLGE9dFtTeW1ib2wuaXRlcmF0b3JdKCk7IShpPShzPWEubmV4dCgpKS5kb25lKSYmKG8ucHVzaChzLnZhbHVlKSwhZXx8by5sZW5ndGghPT1lKTtpPSEwKTt9Y2F0Y2goZil7bj0hMCxyPWZ9ZmluYWxseXt0cnl7IWkmJmFbXCJyZXR1cm5cIl0mJmFbXCJyZXR1cm5cIl0oKX1maW5hbGx5e2lmKG4pdGhyb3cgcn19cmV0dXJuIG99cmV0dXJuIGZ1bmN0aW9uKGUsbyl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZTtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiB0KGUsbyk7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIil9fSgpLEU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciBpPWVbb107aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkua2V5LGkpfX1yZXR1cm4gZnVuY3Rpb24oZSxvLGkpe3JldHVybiBvJiZ0KGUucHJvdG90eXBlLG8pLGkmJnQoZSxpKSxlfX0oKSxqPWZ1bmN0aW9uKHQsZSxvKXtmb3IodmFyIGk9ITA7aTspe3ZhciBuPXQscj1lLHM9bztpPSExLG51bGw9PT1uJiYobj1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBhPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobixyKTtpZih2b2lkIDAhPT1hKXtpZihcInZhbHVlXCJpbiBhKXJldHVybiBhLnZhbHVlO3ZhciBmPWEuZ2V0O2lmKHZvaWQgMD09PWYpcmV0dXJuO3JldHVybiBmLmNhbGwocyl9dmFyIGw9T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO2lmKG51bGw9PT1sKXJldHVybjt0PWwsZT1yLG89cyxpPSEwLGE9bD12b2lkIDB9fTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgeCl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBpbmNsdWRlIHRoZSB1dGlscy5qcyBmaWxlIGJlZm9yZSB0ZXRoZXIuanNcIik7dmFyIFk9eC5VdGlscyxyPVkuZ2V0U2Nyb2xsUGFyZW50cyxhPVkuZ2V0Qm91bmRzLGY9WS5nZXRPZmZzZXRQYXJlbnQsaD1ZLmV4dGVuZCxwPVkuYWRkQ2xhc3MsZD1ZLnJlbW92ZUNsYXNzLG09WS51cGRhdGVDbGFzc2VzLGs9WS5kZWZlcixfPVkuZmx1c2gsbD1ZLmdldFNjcm9sbEJhclNpemUscz1ZLnJlbW92ZVV0aWxFbGVtZW50cyxMPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50KXJldHVyblwiXCI7Zm9yKHZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZT1bXCJ0cmFuc2Zvcm1cIixcIldlYmtpdFRyYW5zZm9ybVwiLFwiT1RyYW5zZm9ybVwiLFwiTW96VHJhbnNmb3JtXCIsXCJtc1RyYW5zZm9ybVwiXSxvPTA7bzxlLmxlbmd0aDsrK28pe3ZhciBpPWVbb107aWYodm9pZCAwIT09dC5zdHlsZVtpXSlyZXR1cm4gaX19KCksRD1bXSxYPWZ1bmN0aW9uKCl7RC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QucG9zaXRpb24oITEpfSksXygpfTshZnVuY3Rpb24oKXt2YXIgdD1udWxsLGU9bnVsbCxvPW51bGwsaT1mdW5jdGlvbiBuKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUmJmU+MTY/KGU9TWF0aC5taW4oZS0xNiwyNTApLHZvaWQobz1zZXRUaW1lb3V0KG4sMjUwKSkpOnZvaWQoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQmJmIoKS10PDEwfHwobnVsbCE9byYmKGNsZWFyVGltZW91dChvKSxvPW51bGwpLHQ9YigpLFgoKSxlPWIoKS10KSl9O1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciYmW1wicmVzaXplXCIsXCJzY3JvbGxcIixcInRvdWNobW92ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKHQsaSl9KX0oKTt2YXIgRj17Y2VudGVyOlwiY2VudGVyXCIsbGVmdDpcInJpZ2h0XCIscmlnaHQ6XCJsZWZ0XCJ9LEg9e21pZGRsZTpcIm1pZGRsZVwiLHRvcDpcImJvdHRvbVwiLGJvdHRvbTpcInRvcFwifSxOPXt0b3A6MCxsZWZ0OjAsbWlkZGxlOlwiNTAlXCIsY2VudGVyOlwiNTAlXCIsYm90dG9tOlwiMTAwJVwiLHJpZ2h0OlwiMTAwJVwifSxVPWZ1bmN0aW9uKHQsZSl7dmFyIG89dC5sZWZ0LGk9dC50b3A7cmV0dXJuXCJhdXRvXCI9PT1vJiYobz1GW2UubGVmdF0pLFwiYXV0b1wiPT09aSYmKGk9SFtlLnRvcF0pLHtsZWZ0Om8sdG9wOml9fSxWPWZ1bmN0aW9uKHQpe3ZhciBlPXQubGVmdCxvPXQudG9wO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBOW3QubGVmdF0mJihlPU5bdC5sZWZ0XSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIE5bdC50b3BdJiYobz1OW3QudG9wXSkse2xlZnQ6ZSx0b3A6b319LFI9ZnVuY3Rpb24odCl7dmFyIGU9dC5zcGxpdChcIiBcIiksbz16KGUsMiksaT1vWzBdLG49b1sxXTtyZXR1cm57dG9wOmksbGVmdDpufX0scT1SLEk9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0KXt2YXIgbz10aGlzO2kodGhpcyxlKSxqKE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksXCJjb25zdHJ1Y3RvclwiLHRoaXMpLmNhbGwodGhpcyksdGhpcy5wb3NpdGlvbj10aGlzLnBvc2l0aW9uLmJpbmQodGhpcyksRC5wdXNoKHRoaXMpLHRoaXMuaGlzdG9yeT1bXSx0aGlzLnNldE9wdGlvbnModCwhMSkseC5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuaW5pdGlhbGl6ZSYmdC5pbml0aWFsaXplLmNhbGwobyl9KSx0aGlzLnBvc2l0aW9uKCl9cmV0dXJuIHYoZSx0KSxFKGUsW3trZXk6XCJnZXRDbGFzc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aDw9MHx8dm9pZCAwPT09YXJndW1lbnRzWzBdP1wiXCI6YXJndW1lbnRzWzBdLGU9dGhpcy5vcHRpb25zLmNsYXNzZXM7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUmJmVbdF0/dGhpcy5vcHRpb25zLmNsYXNzZXNbdF06dGhpcy5vcHRpb25zLmNsYXNzUHJlZml4P3RoaXMub3B0aW9ucy5jbGFzc1ByZWZpeCtcIi1cIit0OnR9fSx7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbz1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV18fGFyZ3VtZW50c1sxXSxpPXtvZmZzZXQ6XCIwIDBcIix0YXJnZXRPZmZzZXQ6XCIwIDBcIix0YXJnZXRBdHRhY2htZW50OlwiYXV0byBhdXRvXCIsY2xhc3NQcmVmaXg6XCJ0ZXRoZXJcIn07dGhpcy5vcHRpb25zPWgoaSx0KTt2YXIgbj10aGlzLm9wdGlvbnMscz1uLmVsZW1lbnQsYT1uLnRhcmdldCxmPW4udGFyZ2V0TW9kaWZpZXI7aWYodGhpcy5lbGVtZW50PXMsdGhpcy50YXJnZXQ9YSx0aGlzLnRhcmdldE1vZGlmaWVyPWYsXCJ2aWV3cG9ydFwiPT09dGhpcy50YXJnZXQ/KHRoaXMudGFyZ2V0PWRvY3VtZW50LmJvZHksdGhpcy50YXJnZXRNb2RpZmllcj1cInZpc2libGVcIik6XCJzY3JvbGwtaGFuZGxlXCI9PT10aGlzLnRhcmdldCYmKHRoaXMudGFyZ2V0PWRvY3VtZW50LmJvZHksdGhpcy50YXJnZXRNb2RpZmllcj1cInNjcm9sbC1oYW5kbGVcIiksW1wiZWxlbWVudFwiLFwidGFyZ2V0XCJdLmZvckVhY2goZnVuY3Rpb24odCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGVbdF0pdGhyb3cgbmV3IEVycm9yKFwiVGV0aGVyIEVycm9yOiBCb3RoIGVsZW1lbnQgYW5kIHRhcmdldCBtdXN0IGJlIGRlZmluZWRcIik7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGVbdF0uanF1ZXJ5P2VbdF09ZVt0XVswXTpcInN0cmluZ1wiPT10eXBlb2YgZVt0XSYmKGVbdF09ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlW3RdKSl9KSxwKHRoaXMuZWxlbWVudCx0aGlzLmdldENsYXNzKFwiZWxlbWVudFwiKSksdGhpcy5vcHRpb25zLmFkZFRhcmdldENsYXNzZXMhPT0hMSYmcCh0aGlzLnRhcmdldCx0aGlzLmdldENsYXNzKFwidGFyZ2V0XCIpKSwhdGhpcy5vcHRpb25zLmF0dGFjaG1lbnQpdGhyb3cgbmV3IEVycm9yKFwiVGV0aGVyIEVycm9yOiBZb3UgbXVzdCBwcm92aWRlIGFuIGF0dGFjaG1lbnRcIik7dGhpcy50YXJnZXRBdHRhY2htZW50PXEodGhpcy5vcHRpb25zLnRhcmdldEF0dGFjaG1lbnQpLHRoaXMuYXR0YWNobWVudD1xKHRoaXMub3B0aW9ucy5hdHRhY2htZW50KSx0aGlzLm9mZnNldD1SKHRoaXMub3B0aW9ucy5vZmZzZXQpLHRoaXMudGFyZ2V0T2Zmc2V0PVIodGhpcy5vcHRpb25zLnRhcmdldE9mZnNldCksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHRoaXMuc2Nyb2xsUGFyZW50cyYmdGhpcy5kaXNhYmxlKCksXCJzY3JvbGwtaGFuZGxlXCI9PT10aGlzLnRhcmdldE1vZGlmaWVyP3RoaXMuc2Nyb2xsUGFyZW50cz1bdGhpcy50YXJnZXRdOnRoaXMuc2Nyb2xsUGFyZW50cz1yKHRoaXMudGFyZ2V0KSx0aGlzLm9wdGlvbnMuZW5hYmxlZCE9PSExJiZ0aGlzLmVuYWJsZShvKX19LHtrZXk6XCJnZXRUYXJnZXRCb3VuZHNcIix2YWx1ZTpmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0aGlzLnRhcmdldE1vZGlmaWVyKXJldHVybiBhKHRoaXMudGFyZ2V0KTtpZihcInZpc2libGVcIj09PXRoaXMudGFyZ2V0TW9kaWZpZXIpe2lmKHRoaXMudGFyZ2V0PT09ZG9jdW1lbnQuYm9keSlyZXR1cm57dG9wOnBhZ2VZT2Zmc2V0LGxlZnQ6cGFnZVhPZmZzZXQsaGVpZ2h0OmlubmVySGVpZ2h0LHdpZHRoOmlubmVyV2lkdGh9O3ZhciB0PWEodGhpcy50YXJnZXQpLGU9e2hlaWdodDp0LmhlaWdodCx3aWR0aDp0LndpZHRoLHRvcDp0LnRvcCxsZWZ0OnQubGVmdH07cmV0dXJuIGUuaGVpZ2h0PU1hdGgubWluKGUuaGVpZ2h0LHQuaGVpZ2h0LShwYWdlWU9mZnNldC10LnRvcCkpLGUuaGVpZ2h0PU1hdGgubWluKGUuaGVpZ2h0LHQuaGVpZ2h0LSh0LnRvcCt0LmhlaWdodC0ocGFnZVlPZmZzZXQraW5uZXJIZWlnaHQpKSksZS5oZWlnaHQ9TWF0aC5taW4oaW5uZXJIZWlnaHQsZS5oZWlnaHQpLGUuaGVpZ2h0LT0yLGUud2lkdGg9TWF0aC5taW4oZS53aWR0aCx0LndpZHRoLShwYWdlWE9mZnNldC10LmxlZnQpKSxlLndpZHRoPU1hdGgubWluKGUud2lkdGgsdC53aWR0aC0odC5sZWZ0K3Qud2lkdGgtKHBhZ2VYT2Zmc2V0K2lubmVyV2lkdGgpKSksZS53aWR0aD1NYXRoLm1pbihpbm5lcldpZHRoLGUud2lkdGgpLGUud2lkdGgtPTIsZS50b3A8cGFnZVlPZmZzZXQmJihlLnRvcD1wYWdlWU9mZnNldCksZS5sZWZ0PHBhZ2VYT2Zmc2V0JiYoZS5sZWZ0PXBhZ2VYT2Zmc2V0KSxlfWlmKFwic2Nyb2xsLWhhbmRsZVwiPT09dGhpcy50YXJnZXRNb2RpZmllcil7dmFyIHQ9dm9pZCAwLG89dGhpcy50YXJnZXQ7bz09PWRvY3VtZW50LmJvZHk/KG89ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQ9e2xlZnQ6cGFnZVhPZmZzZXQsdG9wOnBhZ2VZT2Zmc2V0LGhlaWdodDppbm5lckhlaWdodCx3aWR0aDppbm5lcldpZHRofSk6dD1hKG8pO3ZhciBpPWdldENvbXB1dGVkU3R5bGUobyksbj1vLnNjcm9sbFdpZHRoPm8uY2xpZW50V2lkdGh8fFtpLm92ZXJmbG93LGkub3ZlcmZsb3dYXS5pbmRleE9mKFwic2Nyb2xsXCIpPj0wfHx0aGlzLnRhcmdldCE9PWRvY3VtZW50LmJvZHkscj0wO24mJihyPTE1KTt2YXIgcz10LmhlaWdodC1wYXJzZUZsb2F0KGkuYm9yZGVyVG9wV2lkdGgpLXBhcnNlRmxvYXQoaS5ib3JkZXJCb3R0b21XaWR0aCktcixlPXt3aWR0aDoxNSxoZWlnaHQ6Ljk3NSpzKihzL28uc2Nyb2xsSGVpZ2h0KSxsZWZ0OnQubGVmdCt0LndpZHRoLXBhcnNlRmxvYXQoaS5ib3JkZXJMZWZ0V2lkdGgpLTE1fSxmPTA7czw0MDgmJnRoaXMudGFyZ2V0PT09ZG9jdW1lbnQuYm9keSYmKGY9LTExZS01Kk1hdGgucG93KHMsMiktLjAwNzI3KnMrMjIuNTgpLHRoaXMudGFyZ2V0IT09ZG9jdW1lbnQuYm9keSYmKGUuaGVpZ2h0PU1hdGgubWF4KGUuaGVpZ2h0LDI0KSk7dmFyIGw9dGhpcy50YXJnZXQuc2Nyb2xsVG9wLyhvLnNjcm9sbEhlaWdodC1zKTtyZXR1cm4gZS50b3A9bCoocy1lLmhlaWdodC1mKSt0LnRvcCtwYXJzZUZsb2F0KGkuYm9yZGVyVG9wV2lkdGgpLHRoaXMudGFyZ2V0PT09ZG9jdW1lbnQuYm9keSYmKGUuaGVpZ2h0PU1hdGgubWF4KGUuaGVpZ2h0LDI0KSksZX19fSx7a2V5OlwiY2xlYXJDYWNoZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fY2FjaGU9e319fSx7a2V5OlwiY2FjaGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiB0aGlzLl9jYWNoZSYmKHRoaXMuX2NhY2hlPXt9KSxcInVuZGVmaW5lZFwiPT10eXBlb2YgdGhpcy5fY2FjaGVbdF0mJih0aGlzLl9jYWNoZVt0XT1lLmNhbGwodGhpcykpLHRoaXMuX2NhY2hlW3RdfX0se2tleTpcImVuYWJsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWFyZ3VtZW50cy5sZW5ndGg8PTB8fHZvaWQgMD09PWFyZ3VtZW50c1swXXx8YXJndW1lbnRzWzBdO3RoaXMub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzIT09ITEmJnAodGhpcy50YXJnZXQsdGhpcy5nZXRDbGFzcyhcImVuYWJsZWRcIikpLHAodGhpcy5lbGVtZW50LHRoaXMuZ2V0Q2xhc3MoXCJlbmFibGVkXCIpKSx0aGlzLmVuYWJsZWQ9ITAsdGhpcy5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24oZSl7ZSE9PXQudGFyZ2V0Lm93bmVyRG9jdW1lbnQmJmUuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHQucG9zaXRpb24pfSksZSYmdGhpcy5wb3NpdGlvbigpfX0se2tleTpcImRpc2FibGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7ZCh0aGlzLnRhcmdldCx0aGlzLmdldENsYXNzKFwiZW5hYmxlZFwiKSksZCh0aGlzLmVsZW1lbnQsdGhpcy5nZXRDbGFzcyhcImVuYWJsZWRcIikpLHRoaXMuZW5hYmxlZD0hMSxcInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy5zY3JvbGxQYXJlbnRzJiZ0aGlzLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0LnBvc2l0aW9uKX0pfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5kaXNhYmxlKCksRC5mb3JFYWNoKGZ1bmN0aW9uKGUsbyl7ZT09PXQmJkQuc3BsaWNlKG8sMSl9KSwwPT09RC5sZW5ndGgmJnMoKX19LHtrZXk6XCJ1cGRhdGVBdHRhY2hDbGFzc2VzXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbz10aGlzO3Q9dHx8dGhpcy5hdHRhY2htZW50LGU9ZXx8dGhpcy50YXJnZXRBdHRhY2htZW50O3ZhciBpPVtcImxlZnRcIixcInRvcFwiLFwiYm90dG9tXCIsXCJyaWdodFwiLFwibWlkZGxlXCIsXCJjZW50ZXJcIl07XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHRoaXMuX2FkZEF0dGFjaENsYXNzZXMmJnRoaXMuX2FkZEF0dGFjaENsYXNzZXMubGVuZ3RoJiZ0aGlzLl9hZGRBdHRhY2hDbGFzc2VzLnNwbGljZSgwLHRoaXMuX2FkZEF0dGFjaENsYXNzZXMubGVuZ3RoKSxcInVuZGVmaW5lZFwiPT10eXBlb2YgdGhpcy5fYWRkQXR0YWNoQ2xhc3NlcyYmKHRoaXMuX2FkZEF0dGFjaENsYXNzZXM9W10pO3ZhciBuPXRoaXMuX2FkZEF0dGFjaENsYXNzZXM7dC50b3AmJm4ucHVzaCh0aGlzLmdldENsYXNzKFwiZWxlbWVudC1hdHRhY2hlZFwiKStcIi1cIit0LnRvcCksdC5sZWZ0JiZuLnB1c2godGhpcy5nZXRDbGFzcyhcImVsZW1lbnQtYXR0YWNoZWRcIikrXCItXCIrdC5sZWZ0KSxlLnRvcCYmbi5wdXNoKHRoaXMuZ2V0Q2xhc3MoXCJ0YXJnZXQtYXR0YWNoZWRcIikrXCItXCIrZS50b3ApLGUubGVmdCYmbi5wdXNoKHRoaXMuZ2V0Q2xhc3MoXCJ0YXJnZXQtYXR0YWNoZWRcIikrXCItXCIrZS5sZWZ0KTt2YXIgcj1bXTtpLmZvckVhY2goZnVuY3Rpb24odCl7ci5wdXNoKG8uZ2V0Q2xhc3MoXCJlbGVtZW50LWF0dGFjaGVkXCIpK1wiLVwiK3QpLHIucHVzaChvLmdldENsYXNzKFwidGFyZ2V0LWF0dGFjaGVkXCIpK1wiLVwiK3QpfSksayhmdW5jdGlvbigpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBvLl9hZGRBdHRhY2hDbGFzc2VzJiYobShvLmVsZW1lbnQsby5fYWRkQXR0YWNoQ2xhc3NlcyxyKSxvLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyE9PSExJiZtKG8udGFyZ2V0LG8uX2FkZEF0dGFjaENsYXNzZXMsciksZGVsZXRlIG8uX2FkZEF0dGFjaENsYXNzZXMpfSl9fSx7a2V5OlwicG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1hcmd1bWVudHMubGVuZ3RoPD0wfHx2b2lkIDA9PT1hcmd1bWVudHNbMF18fGFyZ3VtZW50c1swXTtpZih0aGlzLmVuYWJsZWQpe3RoaXMuY2xlYXJDYWNoZSgpO3ZhciBvPVUodGhpcy50YXJnZXRBdHRhY2htZW50LHRoaXMuYXR0YWNobWVudCk7dGhpcy51cGRhdGVBdHRhY2hDbGFzc2VzKHRoaXMuYXR0YWNobWVudCxvKTt2YXIgaT10aGlzLmNhY2hlKFwiZWxlbWVudC1ib3VuZHNcIixmdW5jdGlvbigpe3JldHVybiBhKHQuZWxlbWVudCl9KSxuPWkud2lkdGgscj1pLmhlaWdodDtpZigwPT09biYmMD09PXImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLmxhc3RTaXplKXt2YXIgcz10aGlzLmxhc3RTaXplO249cy53aWR0aCxyPXMuaGVpZ2h0fWVsc2UgdGhpcy5sYXN0U2l6ZT17d2lkdGg6bixoZWlnaHQ6cn07dmFyIGg9dGhpcy5jYWNoZShcInRhcmdldC1ib3VuZHNcIixmdW5jdGlvbigpe3JldHVybiB0LmdldFRhcmdldEJvdW5kcygpfSksZD1oLHA9QyhWKHRoaXMuYXR0YWNobWVudCkse3dpZHRoOm4saGVpZ2h0OnJ9KSx1PUMoVihvKSxkKSxjPUModGhpcy5vZmZzZXQse3dpZHRoOm4saGVpZ2h0OnJ9KSxnPUModGhpcy50YXJnZXRPZmZzZXQsZCk7cD13KHAsYyksdT13KHUsZyk7Zm9yKHZhciBtPWgubGVmdCt1LmxlZnQtcC5sZWZ0LHY9aC50b3ArdS50b3AtcC50b3AseT0wO3k8eC5tb2R1bGVzLmxlbmd0aDsrK3kpe3ZhciBiPXgubW9kdWxlc1t5XSxPPWIucG9zaXRpb24uY2FsbCh0aGlzLHtsZWZ0Om0sdG9wOnYsdGFyZ2V0QXR0YWNobWVudDpvLHRhcmdldFBvczpoLGVsZW1lbnRQb3M6aSxvZmZzZXQ6cCx0YXJnZXRPZmZzZXQ6dSxtYW51YWxPZmZzZXQ6YyxtYW51YWxUYXJnZXRPZmZzZXQ6ZyxzY3JvbGxiYXJTaXplOlMsYXR0YWNobWVudDp0aGlzLmF0dGFjaG1lbnR9KTtpZihPPT09ITEpcmV0dXJuITE7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIE8mJlwib2JqZWN0XCI9PXR5cGVvZiBPJiYodj1PLnRvcCxtPU8ubGVmdCl9dmFyIEU9e3BhZ2U6e3RvcDp2LGxlZnQ6bX0sdmlld3BvcnQ6e3RvcDp2LXBhZ2VZT2Zmc2V0LGJvdHRvbTpwYWdlWU9mZnNldC12LXIraW5uZXJIZWlnaHQsbGVmdDptLXBhZ2VYT2Zmc2V0LHJpZ2h0OnBhZ2VYT2Zmc2V0LW0tbitpbm5lcldpZHRofX0sQT10aGlzLnRhcmdldC5vd25lckRvY3VtZW50LFQ9QS5kZWZhdWx0VmlldyxTPXZvaWQgMDtyZXR1cm4gVC5pbm5lckhlaWdodD5BLmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQmJihTPXRoaXMuY2FjaGUoXCJzY3JvbGxiYXItc2l6ZVwiLGwpLEUudmlld3BvcnQuYm90dG9tLT1TLmhlaWdodCksVC5pbm5lcldpZHRoPkEuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoJiYoUz10aGlzLmNhY2hlKFwic2Nyb2xsYmFyLXNpemVcIixsKSxFLnZpZXdwb3J0LnJpZ2h0LT1TLndpZHRoKSxbXCJcIixcInN0YXRpY1wiXS5pbmRleE9mKEEuYm9keS5zdHlsZS5wb3NpdGlvbikhPT0tMSYmW1wiXCIsXCJzdGF0aWNcIl0uaW5kZXhPZihBLmJvZHkucGFyZW50RWxlbWVudC5zdHlsZS5wb3NpdGlvbikhPT0tMXx8KEUucGFnZS5ib3R0b209QS5ib2R5LnNjcm9sbEhlaWdodC12LXIsRS5wYWdlLnJpZ2h0PUEuYm9keS5zY3JvbGxXaWR0aC1tLW4pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLm9wdGlvbnMub3B0aW1pemF0aW9ucyYmdGhpcy5vcHRpb25zLm9wdGltaXphdGlvbnMubW92ZUVsZW1lbnQhPT0hMSYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRoaXMudGFyZ2V0TW9kaWZpZXImJiFmdW5jdGlvbigpe3ZhciBlPXQuY2FjaGUoXCJ0YXJnZXQtb2Zmc2V0cGFyZW50XCIsZnVuY3Rpb24oKXtyZXR1cm4gZih0LnRhcmdldCl9KSxvPXQuY2FjaGUoXCJ0YXJnZXQtb2Zmc2V0cGFyZW50LWJvdW5kc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIGEoZSl9KSxpPWdldENvbXB1dGVkU3R5bGUoZSksbj1vLHI9e307aWYoW1wiVG9wXCIsXCJMZWZ0XCIsXCJCb3R0b21cIixcIlJpZ2h0XCJdLmZvckVhY2goZnVuY3Rpb24odCl7clt0LnRvTG93ZXJDYXNlKCldPXBhcnNlRmxvYXQoaVtcImJvcmRlclwiK3QrXCJXaWR0aFwiXSl9KSxvLnJpZ2h0PUEuYm9keS5zY3JvbGxXaWR0aC1vLmxlZnQtbi53aWR0aCtyLnJpZ2h0LG8uYm90dG9tPUEuYm9keS5zY3JvbGxIZWlnaHQtby50b3Atbi5oZWlnaHQrci5ib3R0b20sRS5wYWdlLnRvcD49by50b3Arci50b3AmJkUucGFnZS5ib3R0b20+PW8uYm90dG9tJiZFLnBhZ2UubGVmdD49by5sZWZ0K3IubGVmdCYmRS5wYWdlLnJpZ2h0Pj1vLnJpZ2h0KXt2YXIgcz1lLnNjcm9sbFRvcCxsPWUuc2Nyb2xsTGVmdDtFLm9mZnNldD17dG9wOkUucGFnZS50b3Atby50b3Arcy1yLnRvcCxsZWZ0OkUucGFnZS5sZWZ0LW8ubGVmdCtsLXIubGVmdH19fSgpLHRoaXMubW92ZShFKSx0aGlzLmhpc3RvcnkudW5zaGlmdChFKSx0aGlzLmhpc3RvcnkubGVuZ3RoPjMmJnRoaXMuaGlzdG9yeS5wb3AoKSxlJiZfKCksITB9fX0se2tleTpcIm1vdmVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7dmFyIG89e307Zm9yKHZhciBpIGluIHQpe29baV09e307Zm9yKHZhciBuIGluIHRbaV0pe2Zvcih2YXIgcj0hMSxzPTA7czx0aGlzLmhpc3RvcnkubGVuZ3RoOysrcyl7dmFyIGE9dGhpcy5oaXN0b3J5W3NdO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhW2ldJiYheShhW2ldW25dLHRbaV1bbl0pKXtyPSEwO2JyZWFrfX1yfHwob1tpXVtuXT0hMCl9fXZhciBsPXt0b3A6XCJcIixsZWZ0OlwiXCIscmlnaHQ6XCJcIixib3R0b206XCJcIn0sZD1mdW5jdGlvbih0LG8pe3ZhciBpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLm9wdGlvbnMub3B0aW1pemF0aW9ucyxuPWk/ZS5vcHRpb25zLm9wdGltaXphdGlvbnMuZ3B1Om51bGw7aWYobiE9PSExKXt2YXIgcj12b2lkIDAscz12b2lkIDA7aWYodC50b3A/KGwudG9wPTAscj1vLnRvcCk6KGwuYm90dG9tPTAscj0tby5ib3R0b20pLHQubGVmdD8obC5sZWZ0PTAscz1vLmxlZnQpOihsLnJpZ2h0PTAscz0tby5yaWdodCksd2luZG93Lm1hdGNoTWVkaWEpe3ZhciBhPXdpbmRvdy5tYXRjaE1lZGlhKFwib25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMS4zZHBweClcIikubWF0Y2hlc3x8d2luZG93Lm1hdGNoTWVkaWEoXCJvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMS4zKVwiKS5tYXRjaGVzO2F8fChzPU1hdGgucm91bmQocykscj1NYXRoLnJvdW5kKHIpKX1sW0xdPVwidHJhbnNsYXRlWChcIitzK1wicHgpIHRyYW5zbGF0ZVkoXCIrcitcInB4KVwiLFwibXNUcmFuc2Zvcm1cIiE9PUwmJihsW0xdKz1cIiB0cmFuc2xhdGVaKDApXCIpfWVsc2UgdC50b3A/bC50b3A9by50b3ArXCJweFwiOmwuYm90dG9tPW8uYm90dG9tK1wicHhcIix0LmxlZnQ/bC5sZWZ0PW8ubGVmdCtcInB4XCI6bC5yaWdodD1vLnJpZ2h0K1wicHhcIn0scD0hMTtpZigoby5wYWdlLnRvcHx8by5wYWdlLmJvdHRvbSkmJihvLnBhZ2UubGVmdHx8by5wYWdlLnJpZ2h0KT8obC5wb3NpdGlvbj1cImFic29sdXRlXCIsZChvLnBhZ2UsdC5wYWdlKSk6KG8udmlld3BvcnQudG9wfHxvLnZpZXdwb3J0LmJvdHRvbSkmJihvLnZpZXdwb3J0LmxlZnR8fG8udmlld3BvcnQucmlnaHQpPyhsLnBvc2l0aW9uPVwiZml4ZWRcIixkKG8udmlld3BvcnQsdC52aWV3cG9ydCkpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBvLm9mZnNldCYmby5vZmZzZXQudG9wJiZvLm9mZnNldC5sZWZ0PyFmdW5jdGlvbigpe2wucG9zaXRpb249XCJhYnNvbHV0ZVwiO3ZhciBpPWUuY2FjaGUoXCJ0YXJnZXQtb2Zmc2V0cGFyZW50XCIsZnVuY3Rpb24oKXtyZXR1cm4gZihlLnRhcmdldCl9KTtmKGUuZWxlbWVudCkhPT1pJiZrKGZ1bmN0aW9uKCl7ZS5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZS5lbGVtZW50KSxpLmFwcGVuZENoaWxkKGUuZWxlbWVudCl9KSxkKG8ub2Zmc2V0LHQub2Zmc2V0KSxwPSEwfSgpOihsLnBvc2l0aW9uPVwiYWJzb2x1dGVcIixkKHt0b3A6ITAsbGVmdDohMH0sdC5wYWdlKSksIXApaWYodGhpcy5vcHRpb25zLmJvZHlFbGVtZW50KXRoaXMub3B0aW9ucy5ib2R5RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO2Vsc2V7Zm9yKHZhciB1PSEwLGM9dGhpcy5lbGVtZW50LnBhcmVudE5vZGU7YyYmMT09PWMubm9kZVR5cGUmJlwiQk9EWVwiIT09Yy50YWdOYW1lOyl7aWYoXCJzdGF0aWNcIiE9PWdldENvbXB1dGVkU3R5bGUoYykucG9zaXRpb24pe3U9ITE7YnJlYWt9Yz1jLnBhcmVudE5vZGV9dXx8KHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCksdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpKX12YXIgZz17fSxtPSExO2Zvcih2YXIgbiBpbiBsKXt2YXIgdj1sW25dLGI9dGhpcy5lbGVtZW50LnN0eWxlW25dO2IhPT12JiYobT0hMCxnW25dPXYpfW0mJmsoZnVuY3Rpb24oKXtoKGUuZWxlbWVudC5zdHlsZSxnKSxlLnRyaWdnZXIoXCJyZXBvc2l0aW9uZWRcIil9KX19fV0pLGV9KEIpO0kubW9kdWxlcz1bXSx4LnBvc2l0aW9uPVg7dmFyICQ9aChJLHgpLHo9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dmFyIG89W10saT0hMCxuPSExLHI9dm9pZCAwO3RyeXtmb3IodmFyIHMsYT10W1N5bWJvbC5pdGVyYXRvcl0oKTshKGk9KHM9YS5uZXh0KCkpLmRvbmUpJiYoby5wdXNoKHMudmFsdWUpLCFlfHxvLmxlbmd0aCE9PWUpO2k9ITApO31jYXRjaChmKXtuPSEwLHI9Zn1maW5hbGx5e3RyeXshaSYmYVtcInJldHVyblwiXSYmYVtcInJldHVyblwiXSgpfWZpbmFsbHl7aWYobil0aHJvdyByfX1yZXR1cm4gb31yZXR1cm4gZnVuY3Rpb24oZSxvKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlO2lmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkpcmV0dXJuIHQoZSxvKTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKX19KCksWT14LlV0aWxzLGE9WS5nZXRCb3VuZHMsaD1ZLmV4dGVuZCxtPVkudXBkYXRlQ2xhc3NlcyxrPVkuZGVmZXIsRz1bXCJsZWZ0XCIsXCJ0b3BcIixcInJpZ2h0XCIsXCJib3R0b21cIl07eC5tb2R1bGVzLnB1c2goe3Bvc2l0aW9uOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbz10LnRvcCxpPXQubGVmdCxuPXQudGFyZ2V0QXR0YWNobWVudDtpZighdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzKXJldHVybiEwO3ZhciByPXRoaXMuY2FjaGUoXCJlbGVtZW50LWJvdW5kc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIGEoZS5lbGVtZW50KX0pLHM9ci5oZWlnaHQsZj1yLndpZHRoO2lmKDA9PT1mJiYwPT09cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHRoaXMubGFzdFNpemUpe3ZhciBsPXRoaXMubGFzdFNpemU7Zj1sLndpZHRoLHM9bC5oZWlnaHR9dmFyIGQ9dGhpcy5jYWNoZShcInRhcmdldC1ib3VuZHNcIixmdW5jdGlvbigpe3JldHVybiBlLmdldFRhcmdldEJvdW5kcygpfSkscD1kLmhlaWdodCx1PWQud2lkdGgsYz1bdGhpcy5nZXRDbGFzcyhcInBpbm5lZFwiKSx0aGlzLmdldENsYXNzKFwib3V0LW9mLWJvdW5kc1wiKV07dGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9dC5vdXRPZkJvdW5kc0NsYXNzLG89dC5waW5uZWRDbGFzcztlJiZjLnB1c2goZSksbyYmYy5wdXNoKG8pfSksYy5mb3JFYWNoKGZ1bmN0aW9uKHQpe1tcImxlZnRcIixcInRvcFwiLFwicmlnaHRcIixcImJvdHRvbVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2MucHVzaCh0K1wiLVwiK2UpfSl9KTt2YXIgZz1bXSx2PWgoe30sbikseT1oKHt9LHRoaXMuYXR0YWNobWVudCk7cmV0dXJuIHRoaXMub3B0aW9ucy5jb25zdHJhaW50cy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciByPXQudG8sYT10LmF0dGFjaG1lbnQsbD10LnBpbjtcInVuZGVmaW5lZFwiPT10eXBlb2YgYSYmKGE9XCJcIik7dmFyIGg9dm9pZCAwLGQ9dm9pZCAwO2lmKGEuaW5kZXhPZihcIiBcIik+PTApe3ZhciBjPWEuc3BsaXQoXCIgXCIpLG09eihjLDIpO2Q9bVswXSxoPW1bMV19ZWxzZSBoPWQ9YTt2YXIgYj1PKGUscik7XCJ0YXJnZXRcIiE9PWQmJlwiYm90aFwiIT09ZHx8KG88YlsxXSYmXCJ0b3BcIj09PXYudG9wJiYobys9cCx2LnRvcD1cImJvdHRvbVwiKSxvK3M+YlszXSYmXCJib3R0b21cIj09PXYudG9wJiYoby09cCx2LnRvcD1cInRvcFwiKSksXCJ0b2dldGhlclwiPT09ZCYmKFwidG9wXCI9PT12LnRvcCYmKFwiYm90dG9tXCI9PT15LnRvcCYmbzxiWzFdPyhvKz1wLHYudG9wPVwiYm90dG9tXCIsbys9cyx5LnRvcD1cInRvcFwiKTpcInRvcFwiPT09eS50b3AmJm8rcz5iWzNdJiZvLShzLXApPj1iWzFdJiYoby09cy1wLHYudG9wPVwiYm90dG9tXCIseS50b3A9XCJib3R0b21cIikpLFwiYm90dG9tXCI9PT12LnRvcCYmKFwidG9wXCI9PT15LnRvcCYmbytzPmJbM10/KG8tPXAsdi50b3A9XCJ0b3BcIixvLT1zLHkudG9wPVwiYm90dG9tXCIpOlwiYm90dG9tXCI9PT15LnRvcCYmbzxiWzFdJiZvKygyKnMtcCk8PWJbM10mJihvKz1zLXAsdi50b3A9XCJ0b3BcIix5LnRvcD1cInRvcFwiKSksXCJtaWRkbGVcIj09PXYudG9wJiYobytzPmJbM10mJlwidG9wXCI9PT15LnRvcD8oby09cyx5LnRvcD1cImJvdHRvbVwiKTpvPGJbMV0mJlwiYm90dG9tXCI9PT15LnRvcCYmKG8rPXMseS50b3A9XCJ0b3BcIikpKSxcInRhcmdldFwiIT09aCYmXCJib3RoXCIhPT1ofHwoaTxiWzBdJiZcImxlZnRcIj09PXYubGVmdCYmKGkrPXUsdi5sZWZ0PVwicmlnaHRcIiksaStmPmJbMl0mJlwicmlnaHRcIj09PXYubGVmdCYmKGktPXUsdi5sZWZ0PVwibGVmdFwiKSksXCJ0b2dldGhlclwiPT09aCYmKGk8YlswXSYmXCJsZWZ0XCI9PT12LmxlZnQ/XCJyaWdodFwiPT09eS5sZWZ0PyhpKz11LHYubGVmdD1cInJpZ2h0XCIsaSs9Zix5LmxlZnQ9XCJsZWZ0XCIpOlwibGVmdFwiPT09eS5sZWZ0JiYoaSs9dSx2LmxlZnQ9XCJyaWdodFwiLGktPWYseS5sZWZ0PVwicmlnaHRcIik6aStmPmJbMl0mJlwicmlnaHRcIj09PXYubGVmdD9cImxlZnRcIj09PXkubGVmdD8oaS09dSx2LmxlZnQ9XCJsZWZ0XCIsaS09Zix5LmxlZnQ9XCJyaWdodFwiKTpcInJpZ2h0XCI9PT15LmxlZnQmJihpLT11LHYubGVmdD1cImxlZnRcIixpKz1mLHkubGVmdD1cImxlZnRcIik6XCJjZW50ZXJcIj09PXYubGVmdCYmKGkrZj5iWzJdJiZcImxlZnRcIj09PXkubGVmdD8oaS09Zix5LmxlZnQ9XCJyaWdodFwiKTppPGJbMF0mJlwicmlnaHRcIj09PXkubGVmdCYmKGkrPWYseS5sZWZ0PVwibGVmdFwiKSkpLFwiZWxlbWVudFwiIT09ZCYmXCJib3RoXCIhPT1kfHwobzxiWzFdJiZcImJvdHRvbVwiPT09eS50b3AmJihvKz1zLHkudG9wPVwidG9wXCIpLG8rcz5iWzNdJiZcInRvcFwiPT09eS50b3AmJihvLT1zLHkudG9wPVwiYm90dG9tXCIpKSxcImVsZW1lbnRcIiE9PWgmJlwiYm90aFwiIT09aHx8KGk8YlswXSYmKFwicmlnaHRcIj09PXkubGVmdD8oaSs9Zix5LmxlZnQ9XCJsZWZ0XCIpOlwiY2VudGVyXCI9PT15LmxlZnQmJihpKz1mLzIseS5sZWZ0PVwibGVmdFwiKSksaStmPmJbMl0mJihcImxlZnRcIj09PXkubGVmdD8oaS09Zix5LmxlZnQ9XCJyaWdodFwiKTpcImNlbnRlclwiPT09eS5sZWZ0JiYoaS09Zi8yLHkubGVmdD1cInJpZ2h0XCIpKSksXCJzdHJpbmdcIj09dHlwZW9mIGw/bD1sLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudHJpbSgpfSk6bD09PSEwJiYobD1bXCJ0b3BcIixcImxlZnRcIixcInJpZ2h0XCIsXCJib3R0b21cIl0pLGw9bHx8W107dmFyIHc9W10sQz1bXTtvPGJbMV0mJihsLmluZGV4T2YoXCJ0b3BcIik+PTA/KG89YlsxXSx3LnB1c2goXCJ0b3BcIikpOkMucHVzaChcInRvcFwiKSksbytzPmJbM10mJihsLmluZGV4T2YoXCJib3R0b21cIik+PTA/KG89YlszXS1zLHcucHVzaChcImJvdHRvbVwiKSk6Qy5wdXNoKFwiYm90dG9tXCIpKSxpPGJbMF0mJihsLmluZGV4T2YoXCJsZWZ0XCIpPj0wPyhpPWJbMF0sdy5wdXNoKFwibGVmdFwiKSk6Qy5wdXNoKFwibGVmdFwiKSksaStmPmJbMl0mJihsLmluZGV4T2YoXCJyaWdodFwiKT49MD8oaT1iWzJdLWYsdy5wdXNoKFwicmlnaHRcIikpOkMucHVzaChcInJpZ2h0XCIpKSx3Lmxlbmd0aCYmIWZ1bmN0aW9uKCl7dmFyIHQ9dm9pZCAwO3Q9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUub3B0aW9ucy5waW5uZWRDbGFzcz9lLm9wdGlvbnMucGlubmVkQ2xhc3M6ZS5nZXRDbGFzcyhcInBpbm5lZFwiKSxnLnB1c2godCksdy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2cucHVzaCh0K1wiLVwiK2UpfSl9KCksQy5sZW5ndGgmJiFmdW5jdGlvbigpe3ZhciB0PXZvaWQgMDt0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLm9wdGlvbnMub3V0T2ZCb3VuZHNDbGFzcz9lLm9wdGlvbnMub3V0T2ZCb3VuZHNDbGFzczplLmdldENsYXNzKFwib3V0LW9mLWJvdW5kc1wiKSxnLnB1c2godCksQy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2cucHVzaCh0K1wiLVwiK2UpfSl9KCksKHcuaW5kZXhPZihcImxlZnRcIik+PTB8fHcuaW5kZXhPZihcInJpZ2h0XCIpPj0wKSYmKHkubGVmdD12LmxlZnQ9ITEpLCh3LmluZGV4T2YoXCJ0b3BcIik+PTB8fHcuaW5kZXhPZihcImJvdHRvbVwiKT49MCkmJih5LnRvcD12LnRvcD0hMSksdi50b3A9PT1uLnRvcCYmdi5sZWZ0PT09bi5sZWZ0JiZ5LnRvcD09PWUuYXR0YWNobWVudC50b3AmJnkubGVmdD09PWUuYXR0YWNobWVudC5sZWZ0fHwoZS51cGRhdGVBdHRhY2hDbGFzc2VzKHksdiksZS50cmlnZ2VyKFwidXBkYXRlXCIse2F0dGFjaG1lbnQ6eSx0YXJnZXRBdHRhY2htZW50OnZ9KSl9KSxrKGZ1bmN0aW9uKCl7ZS5vcHRpb25zLmFkZFRhcmdldENsYXNzZXMhPT0hMSYmbShlLnRhcmdldCxnLGMpLG0oZS5lbGVtZW50LGcsYyl9KSx7dG9wOm8sbGVmdDppfX19KTt2YXIgWT14LlV0aWxzLGE9WS5nZXRCb3VuZHMsbT1ZLnVwZGF0ZUNsYXNzZXMsaz1ZLmRlZmVyO3gubW9kdWxlcy5wdXNoKHtwb3NpdGlvbjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG89dC50b3AsaT10LmxlZnQsbj10aGlzLmNhY2hlKFwiZWxlbWVudC1ib3VuZHNcIixmdW5jdGlvbigpe3JldHVybiBhKGUuZWxlbWVudCl9KSxyPW4uaGVpZ2h0LHM9bi53aWR0aCxmPXRoaXMuZ2V0VGFyZ2V0Qm91bmRzKCksbD1vK3IsaD1pK3MsZD1bXTtvPD1mLmJvdHRvbSYmbD49Zi50b3AmJltcImxlZnRcIixcInJpZ2h0XCJdLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9Zlt0XTtlIT09aSYmZSE9PWh8fGQucHVzaCh0KX0pLGk8PWYucmlnaHQmJmg+PWYubGVmdCYmW1widG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1mW3RdO2UhPT1vJiZlIT09bHx8ZC5wdXNoKHQpfSk7dmFyIHA9W10sdT1bXSxjPVtcImxlZnRcIixcInRvcFwiLFwicmlnaHRcIixcImJvdHRvbVwiXTtyZXR1cm4gcC5wdXNoKHRoaXMuZ2V0Q2xhc3MoXCJhYnV0dGVkXCIpKSxjLmZvckVhY2goZnVuY3Rpb24odCl7cC5wdXNoKGUuZ2V0Q2xhc3MoXCJhYnV0dGVkXCIpK1wiLVwiK3QpfSksZC5sZW5ndGgmJnUucHVzaCh0aGlzLmdldENsYXNzKFwiYWJ1dHRlZFwiKSksZC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3UucHVzaChlLmdldENsYXNzKFwiYWJ1dHRlZFwiKStcIi1cIit0KX0pLGsoZnVuY3Rpb24oKXtlLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyE9PSExJiZtKGUudGFyZ2V0LHUscCksbShlLmVsZW1lbnQsdSxwKX0pLCEwfX0pO3ZhciB6PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3ZhciBvPVtdLGk9ITAsbj0hMSxyPXZvaWQgMDt0cnl7Zm9yKHZhciBzLGE9dFtTeW1ib2wuaXRlcmF0b3JdKCk7IShpPShzPWEubmV4dCgpKS5kb25lKSYmKG8ucHVzaChzLnZhbHVlKSwhZXx8by5sZW5ndGghPT1lKTtpPSEwKTt9Y2F0Y2goZil7bj0hMCxyPWZ9ZmluYWxseXt0cnl7IWkmJmFbXCJyZXR1cm5cIl0mJmFbXCJyZXR1cm5cIl0oKX1maW5hbGx5e2lmKG4pdGhyb3cgcn19cmV0dXJuIG99cmV0dXJuIGZ1bmN0aW9uKGUsbyl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZTtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiB0KGUsbyk7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIil9fSgpO3JldHVybiB4Lm1vZHVsZXMucHVzaCh7cG9zaXRpb246ZnVuY3Rpb24odCl7dmFyIGU9dC50b3Asbz10LmxlZnQ7aWYodGhpcy5vcHRpb25zLnNoaWZ0KXt2YXIgaT10aGlzLm9wdGlvbnMuc2hpZnQ7XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRpb25zLnNoaWZ0JiYoaT10aGlzLm9wdGlvbnMuc2hpZnQuY2FsbCh0aGlzLHt0b3A6ZSxsZWZ0Om99KSk7dmFyIG49dm9pZCAwLHI9dm9pZCAwO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpKXtpPWkuc3BsaXQoXCIgXCIpLGlbMV09aVsxXXx8aVswXTt2YXIgcz1pLGE9eihzLDIpO249YVswXSxyPWFbMV0sbj1wYXJzZUZsb2F0KG4sMTApLHI9cGFyc2VGbG9hdChyLDEwKX1lbHNlIG49aS50b3Ascj1pLmxlZnQ7cmV0dXJuIGUrPW4sbys9cix7dG9wOmUsbGVmdDpvfX19fSksJH0pOyJdfQ==